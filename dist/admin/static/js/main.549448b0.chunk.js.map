{"version":3,"sources":["js/globalFuncs.js","js/Redux/actions.js","js/globalConsts.js","admin/js/Controls/PBHeader.js","admin/SlideOutMenu.js","admin/js/Views/HomePage/HomePage.js","admin/js/Views/SignInAdmin/SignInAdmin.js","admin/js/Views/MainInfoPage/MainInfoPage.js","admin/js/Views/ChangeSystemStatus/ChangeSystemStatus.js","admin/js/Views/PersonalCab/PersonalCab.js","admin/js/Views/WashingPoint/WashingHistoryLine.js","admin/js/Views/WashingPoint/WashingPoint.js","admin/js/Views/OutPoints/OutPoints.js","admin/js/Views/PointSTFF/PointSTFFHistoryLine.js","admin/js/Views/PointSTFF/PointSTFF.js","admin/js/Views/PointSTFF/LoadSTFF.js","admin/js/Views/GenerateDocs/GenerateDocs.js","admin/js/Views/GenerateDocs/DocForSTFF.js","admin/js/Views/GenerateDocs/DocForWashing.js","admin/js/Views/GenerateDocs/DocForSells.js","admin/js/Views/MenuCategories/MenuCategories.js","admin/js/Views/MenuCategories/IUCategory.js","admin/js/Views/MenuDishes/MenuDishes.js","admin/js/Views/MenuDishes/IUDish.js","admin/js/Views/OvenPoints/OvenPoints.js","admin/js/Views/Operators/Operators.js","admin/js/Views/Operators/IOperator.js","admin/js/Views/AdBlocks/AdBlocks.js","admin/js/Views/AdBlocks/IUAdBlock.js","js/Redux/reducers.js","js/Redux/configureStore.js","admin/Main.js","admin/index.js"],"names":["globalFuncs","jsonData","key","displayExpr","valueExpr","index","data","processServiceResult","successFunction","errorFunction","Error","console","log","text","toUpperCase","sendRequest","type","methodName","JSONdata","body","arguments","length","undefined","JSON","stringify","axios","post","concat","process","then","res","catch","err","isAxiosError","response","put","get","status","delete","sendRequestAwait","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","stringifyNeeded","_args","wrap","_context","prev","next","t0","sent","abrupt","stop","_x","_x2","_x3","_x4","_x5","apply","this","getToken","sessionStorage","getItem","removeUserSession","removeItem","setUserSession","token","setItem","mapStateToProps_global","state","dataForPage","visibilityOfLoadingPanel","initializedContext","error","isLoading","context","CalcStartDate","period","moment","add","set","hours","minute","second","startOf","CalcEndDate","endOf","CLEAR_ALL_PAGES_DATA","CLEAR_PAGE_DATA_BY_PAGE_NAME","GET_PAGE_DATA_BY_PAGE_NAME","INIT_DATA_FOR_PAGE","GO_TO_PAGE","ERROR","LOAD_PANEL_VISIBLE","LOAD_PANEL_INVISIBLE","CLEAR_ALL_LOAD_PANELS","INIT_CONTEXT","UNMOUNT_CONTEXT","dataSource","initPageData","redirectToPage","pageName","goToPage","isUnitedWithExistedData","dispatch","assign","countOfLoaders","changeVisibilityOfLoadingPanel","visible","initContext","User","Pages","unmountContext","globalConsts","menu","back","blank","root","current","home","path","signIn","main","title","productsMovements","loadProducts","washPoint","changeSystemStatus","outPoints","generateDocs","docSTFF","docSells","docWashing","menuCategories","iUCategory","menuDishes","iUDish","ovenPoints","operators","iOperator","adBlocks","iUAdBlocks","user","logout","washing","load_stff","sysStatus","outpoints","ovenpoints","value","PBHeader","react_default","createElement","className","devextreme_react","props","buttonIcon","headerButtonMode","icon","onClick","onGoToPageClick","React","Component","SlideOutMenu","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","show","setState","menuVisible","hide","menuItemClick","e","hashRouter","history","pizzabot","push","page","target","pageTarget","headerButtonOnClick","renderListItem","availablePages","locationHash","getAvailablePageIndexFromPath","Fragment","indexOf","window","location","hash","replace","button","action","currentPageTitle","_this2","startPage","pages","pathname","params","setStateData","t","currentPageState","canBack","prevPage","pop","charAt","toLowerCase","substring","_this3","react_router_dom","ref","x","hashType","defaultPage","react_router","exact","from","to","menuTemplate","contentTemplate","onOptionChanged","name","menuItems","filter","item","itemRender","width","Controls_PBHeader","map","i","component","HomePage","welcomeMsg","forStartWorkMsg","supportMsg","handleGoToSignInPage","bind","assertThisInitialized","src","alt","height","connect","SignInAdmin","login","password","showErrorMsg","handleLoginChanged","handlePasswordChanged","handleSignInClick","handleFocusOnConrol","args","_this$state","_this$state2","mode","mask","placeholder","isValid","onValueChanged","onEnterKey","onFocusIn","MainInfoPage","numberOfOrdersNow","numberOfAllOrdersToday","numberOfErrors","numberOfDishesAreUnavailable","stffs","OrdersNow","OrdersToday","CountOfUnavailableDishes","CountOfErrors","loadSTFFData","reponse","DataSource","loadMode","pageSize","paginate","store","STFFCount","parseToDateSourse","style","fontSize","showColumnHeaders","showBorders","showColumnLines","showRowLines","defaultPager","showInfo","showNavigationButtons","customModeEnabled","noDataText","columnAutoWidth","defaultScrolling","showScrollbar","wordWrapEnabled","loadPanel","enabled","data_grid","caption","dataField","allowHiding","allowReordering","ChangeSystemStatus","lastAction","handleChangeStatusOfTheSystem","loadData","_this$props","address","userprofilerefid","Profile","RefID","Status","operationtype","operationTypes","last_action","Operations","parse","date","Date","dateofoperation","prevMode","vclassName","dangerouslySetInnerHTML","__html","msg","operatorfi","toLocaleDateString","toLocaleTimeString","hour","PersonalCab","isEditMode","pwd","handleEditPersonalInfo","handleChangeNameField","handleChangeSNameField","handleChangeLNameField","handleChangeEmailField","handleChangePhoneField","handleChangeOldPwd","handleChangeNewPwd","handleChangeAcceptNewPwd","handleFinishEditing","validationEngine","validateGroup","refid","userfn","FirstName","usersn","SecondName","userln","LastName","useremail","Email","userphone","Phone","oldpwd","oldPwd","execby","isSuccess","newPwd","checkNewPwd","_this$props$context$U","RoleName","readOnly","validator","message","comparisonTarget","WashingHistoryLine","execBy","actionTypeData","washingType","WashingPoint","lastActions","washingTypeSource","washingTypeValue","handleStartWashing","handleCancelWashing","handleSendWashingComand","handleChangeWashingType","loadHistoryOfWashing","datefrom","utc","dateto","typename","typeCodeData","_this4","userrefid","actiontype","actioncontent","insertSuccess","findValueInJson","focusStateEnabled","hoverStateEnabled","activeStateEnabled","WashingPoint_WashingHistoryLine","OutPoints","outpointsByCntrls","handleChangeEnabledOfOutPoint","cntrlsname","cntrlsType","Cntrls","_this$props2","itemData","point_id","id","cntrlByKey","items","grouped","collapsibleGroups","onItemClick","groupRender","itemTemplate","lineContainer","parentElement","ReactDOM","render","PointSTFFHistoryLine","mvmntType","PointSTFF","handleAddSTFFMovement","loadHistoryOfSTFF","PointSTFF_PointSTFFHistoryLine","LoadSTFF","actionType","loadSTFF","unloadSTFF","loadContainer","stffForLoad","fridgeMap","containerInfoPopupVisible","containerInfoPopupData","stffCellCode","showConfirmationMsg","messageHtml","custom","buttons","collectionOfNamesForContainer","handleLoadSTFF","handleChangeActionType","handleMakeMvmntInThisContainer","handleHidingPopup","handleChooseCellForLoad","handleAddStffToCell","handleLoadContainer","handleChangeStffForCell","FridgeMap","StffsByNames","sendHistoryOfUser","notify","_this$state3","codename","showPopup","withUnload","conName","colOfNamesJson","keyLocal","hasOwnProperty","containerName","cellName","colOfNamesArr","names","dialogResult","_this$state4","disabled","keys","popup","onHiding","dragEnabled","closeOnOutsideClick","showTitle","fullScreen","searchEnabled","GenerateDocs","handleGoToSTFFDocs","handleGoToSellsDocs","handleGoToWashingDocs","DocForSTFF","DocForWashing","operatorForDoc","dateState","dateFrom","dateTo","tagDataSource","handleChangeType","handleChangeOperator","handleChangeDateState","handleChangeDate","handleGenerateDoc","Operators","newPeriod","element","showSelectionControls","selectDateBox","pickerType","DocForSells","MenuCategories","IUCategory","MenuDishes","IUDish","OvenPoints","ovenpointsbyControl","handleChangeEnabledOvenPoint","IOperator","AdBlocks","IUAdBlock","rootReducer","combineReducers","loggerMiddleware","createLogger","preloadedState","createStore","applyMiddleware","thunkMiddleware","Main","reload","showIndicator","admin_SlideOutMenu","MainComponent","Root","es","admin_Main","document","getElementById"],"mappings":"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","file":"static/js/main.549448b0.chunk.js","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\n\nvar globalFuncs = {};\n\n//#region JSON functions\n\nglobalFuncs.findValueInJson = (jsonData, key, displayExpr, valueExpr) => {\n    for(var index in jsonData) {\n        var data = jsonData[index];\n        if (data[valueExpr] === key) {\n            return data[displayExpr];\n        }\n    }\n\n    return null;\n}\n\n//#endregion\n\n//#region Server request\n\nvar processServiceResult = function(data, successFunction, errorFunction) {\n    if (data) {\n        data = data.data;\n        if (data.Error) {\n            console.log('Error in response');\n            if (data.Error.text.toUpperCase() === 'SESSION EXPIRED'){\n                // go to session expired page\n            }\n\n            if (errorFunction) {\n                errorFunction(data.Error);\n            }\n        } else {\n            if (successFunction) {\n                successFunction(data);\n            }\n        }\n    } else {\n        console.log('Something went wrong with response');\n    }\n}\n\nglobalFuncs.sendRequest = function(type, methodName, JSONdata, successFunction, errorFunction, stringifyNeeded = false) {\n    let body;\n    if (stringifyNeeded) {\n        body = JSONdata != null ? JSON.stringify(JSONdata) : null;\n    } else {\n        body = JSONdata;\n    }\n\n    switch(type){\n        case 'POST': {\n            axios.post(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            .then(res => {\n                processServiceResult(res, successFunction, errorFunction);\n            })\n            .catch(err => {\n                if (!err.isAxiosError) {\n                    processServiceResult(err.response, successFunction, errorFunction);\n                }\n            });\n            break;\n        }\n        case 'PUT': {\n            axios.put(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            .then(res => {\n                processServiceResult(res, successFunction, errorFunction);\n            })\n            .catch(err => {\n                if (!err.isAxiosError) {\n                    processServiceResult(err.response, successFunction, errorFunction);\n                }\n            });\n            break;\n        }\n        case 'GET': {\n            axios.get(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            .then(res => {\n                processServiceResult(res, successFunction, errorFunction);\n            })\n            .catch(err => {\n                if (err.response.status === 401) {\n                    errorFunction();\n                }\n                if (!err.isAxiosError) {\n                    processServiceResult(err.response, successFunction, errorFunction);\n                }\n            });\n            break;\n        }\n        case 'DELETE': {\n            axios.delete(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            .then(res => {\n                processServiceResult(res, successFunction, errorFunction);\n            })\n            .catch(err => {\n                if (!err.isAxiosError) {\n                    processServiceResult(err.response, successFunction, errorFunction);\n                }\n            });\n            break;\n        }\n        default: return;\n    }\n    \n}\n\nglobalFuncs.sendRequestAwait = async function(type, methodName, JSONdata, successFunction, errorFunction, stringifyNeeded = false) {\n    let body;\n    if (stringifyNeeded) {\n        body = JSONdata != null ? JSON.stringify(JSONdata) : null;\n    } else {\n        body = JSONdata;\n    }\n\n    let res = null;\n    switch(type){\n        case 'POST': {\n            res = await axios.post(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body);\n            break;\n        }\n        case 'PUT': {\n            res = await axios.put(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            break;\n        }\n        case 'GET': {\n            res = await axios.get(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            break;\n        }\n        case 'DELETE': {\n            res = await axios.delete(`http://${process.env.IP}${process.env.NODE_ENV === 'development-3000' ? ':4000' : ':2093'}/api${methodName}`, body)\n            break;\n        }\n        default: break;\n    }\n\n    if (res) {\n        if (typeof (res.isAxiosError) === 'undefined') {\n            processServiceResult(res, successFunction, errorFunction);\n        } else if (!res.isAxiosError) {\n            processServiceResult(res.response, successFunction, errorFunction);\n        }\n    }\n}\n\n//#endregion\n\n//#region Tokens\n\nglobalFuncs.getToken = function() {\n    return sessionStorage.getItem('token') || null;\n}\n\nglobalFuncs.removeUserSession = function() {\n    sessionStorage.removeItem('token');\n}\n\nglobalFuncs.setUserSession = function(token) {\n    sessionStorage.setItem('token', token);\n}\n\n//#endregion\n\n//#region Redux global functions\n\nglobalFuncs.mapStateToProps_global = function(state) {\n    const {\n        dataForPage,\n        visibilityOfLoadingPanel,\n        initializedContext,\n        error\n    } = state;\n\n    return {\n        isLoading: visibilityOfLoadingPanel.isLoading,\n        context: initializedContext,\n        dataForPage,\n        error\n    }\n}\n\n//#endregion\n\nglobalFuncs.CalcStartDate = (period) => {\n    var res;\n\n    switch (period) {\n        case 'LH': { //Last hour\n            res = moment().add(-1, 'hours');\n            break;\n        }\n        case 'TD': { //Today\n            res = moment().set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'YD': { //Yesterday\n            res = moment().add(-1, 'days').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'TW': { //This week\n            res = moment().startOf('isoWeek').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'TM': { //This month\n            res = moment().startOf('month').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'TQ': { //This quarter\n            res = moment().startOf('quarter').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'TY': { //This year\n            res = moment().startOf('year').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LT': { //Last 2 days\n            res = moment().add(-1, 'days').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LS': { //Last 7 days\n            res = moment().add(-6, 'days').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LW': { //Last week\n            res = moment().startOf('isoWeek').add(-7, 'days').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LD': { //Last 30 days\n            res = moment().add(-30, 'days').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LM': { //Last month\n            res = moment().startOf('month').add(-1, 'month').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LQ': { //Last quarter\n            res = moment().startOf('quarter').add(-1, 'quarter').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        case 'LY': { //Last year\n            res = moment().startOf('year').add(-1, 'year').set({ 'hours': 0, 'minute': 0, 'second': 0 });\n            break;\n        }\n        default: {\n            res = null;\n            break;\n        }\n    }\n\n    return res;\n}\nglobalFuncs.CalcEndDate = (period) => {\n    var res;\n\n    switch (period) {\n        case 'LH': { //Last hour\n            res = moment();\n            break;\n        }\n        case 'TD': { //Today\n            res = moment().set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'YD': { //Yesterday\n            res = moment().add(-1, 'days').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'TW': { //This week\n            res = moment().endOf('isoWeek').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'TM': { //This month\n            res = moment().endOf('month').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'TQ': { //This quarter\n            res = moment().endOf('quarter').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'TY': { //This year\n            res = moment().endOf('year').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LT': { //Last 2 days\n            res = moment().set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LS': { //Last 7 days\n            res = moment().set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LW': { //Last week\n            res = moment().endOf('isoWeek').add(-7, 'days').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LD': { //Last 30 days\n            res = moment().set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LM': { //Last month\n            res = moment().endOf('month').add(-1, 'month').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LQ': { //Last quarter\n            res = moment().endOf('quarter').add(-1, 'quarter').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        case 'LY': { //Last year\n            res = moment().endOf('year').add(-1, 'year').set({ 'hours': 23, 'minute': 59, 'second': 59 });\n            break;\n        }\n        default: {\n            res = null;\n            break;\n        }\n    }\n\n    return res;\n}\n\nexport default globalFuncs","// global\r\nimport globalFuncs from 'js/globalFuncs';\r\n\r\nexport const CLEAR_ALL_PAGES_DATA = 'CLEAR_ALL_PAGES_DATA';\r\nexport const CLEAR_PAGE_DATA_BY_PAGE_NAME = 'CLEAR_PAGE_DATA_BY_PAGE_NAME';\r\n\r\nexport const GET_PAGE_DATA_BY_PAGE_NAME = 'GET_PAGE_DATA_BY_PAGE_NAME';\r\nexport const INIT_DATA_FOR_PAGE = 'INIT_DATA_FOR_PAGE';\r\n\r\nexport const GO_TO_PAGE = 'GO_TO_PAGE';\r\n\r\nexport const ERROR = 'ERROR';\r\n\r\nexport const LOAD_PANEL_VISIBLE = 'LOAD_PANEL_VISIBLE';\r\nexport const LOAD_PANEL_INVISIBLE = 'LOAD_PANEL_INVISIBLE';\r\nexport const CLEAR_ALL_LOAD_PANELS = 'CLEAR_ALL_LOAD_PANELS';\r\n\r\nexport const INIT_CONTEXT = 'INIT_CONTEXT';\r\nexport const UNMOUNT_CONTEXT = 'UNMOUNT_CONTEXT';\r\n\r\n\r\n//#region Exchange data between pages\r\n\r\nlet dataSource = {};\r\n\r\nexport function clearDataByPageName(pageName) {\r\n    if (dataSource && dataSource[pageName]) {\r\n        delete dataSource[pageName];\r\n\r\n        return {\r\n            type: CLEAR_PAGE_DATA_BY_PAGE_NAME,\r\n        }\r\n    }\r\n}\r\n\r\nexport function clearPagesData() {\r\n    dataSource = {};\r\n    return {\r\n        type: CLEAR_ALL_PAGES_DATA,\r\n    }\r\n}\r\n\r\nexport function getDataByPageName(pageName) {\r\n    return {\r\n        type: GET_PAGE_DATA_BY_PAGE_NAME,\r\n        data: dataSource[pageName],\r\n    }\r\n}\r\n\r\nfunction initPageData(data) {\r\n    return {\r\n        type: INIT_DATA_FOR_PAGE,\r\n        data,\r\n    }\r\n}\r\n\r\nfunction redirectToPage(pageName) {\r\n    return {\r\n        type: GO_TO_PAGE,\r\n        pageName\r\n    }\r\n}\r\n\r\nexport function goToPageTemporary(pageName, data, pageNameSource, dataOfSource, isUnitedWithExistedDataOfTarget = false, isUnitedWithExistedDataOfSource = false) {\r\n    return dispatch => {\r\n        if (data) {\r\n            if (dataSource[pageName] && isUnitedWithExistedDataOfTarget) {\r\n                dataSource[pageName] = Object.assign(\r\n                    dataSource[pageName],\r\n                    data\r\n                );\r\n            } else {\r\n                dataSource[pageName] = data;\r\n            }\r\n        }\r\n\r\n        if (dataOfSource) {\r\n            if (dataSource[pageNameSource] && isUnitedWithExistedDataOfSource) {\r\n                dataSource[pageNameSource] = Object.assign(\r\n                    dataSource[pageNameSource],\r\n                    dataOfSource\r\n                );\r\n            } else {\r\n                dataSource[pageNameSource] = dataOfSource;\r\n            }\r\n        }\r\n\r\n        if (dataSource[pageName]) {\r\n            dispatch(initPageData(dataSource[pageName]));\r\n        }\r\n        dispatch(redirectToPage(pageName));\r\n    }\r\n}\r\n\r\nexport function goToPage(pageName, data, isUnitedWithExistedData = false) {\r\n    return dispatch => {\r\n        if (data) {\r\n            if (dataSource[pageName] && isUnitedWithExistedData) {\r\n                dataSource[pageName] = Object.assign(\r\n                    dataSource[pageName],\r\n                    data\r\n                );\r\n            } else {\r\n                dataSource[pageName] = data;\r\n            }\r\n        }\r\n\r\n        if (dataSource[pageName]) {\r\n            dispatch(initPageData(dataSource[pageName]));\r\n        }\r\n        dispatch(redirectToPage(pageName))\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Load panel\r\n\r\nlet countOfLoaders = 0;\r\n\r\nexport function changeVisibilityOfLoadingPanel(visible) {\r\n    countOfLoaders = visible ? countOfLoaders + 1 : countOfLoaders - 1;\r\n    countOfLoaders = countOfLoaders < 0 ? 0 : countOfLoaders;\r\n    return {\r\n        type: countOfLoaders > 0 ? LOAD_PANEL_VISIBLE : LOAD_PANEL_INVISIBLE\r\n    };\r\n}\r\n\r\nexport function clearAllLoadingPanels(){\r\n    countOfLoaders = 0;\r\n    return {\r\n        type: CLEAR_ALL_LOAD_PANELS,\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Init context\r\n\r\nexport function initContext(data) {\r\n    if (data.token) {\r\n        globalFuncs.setUserSession(data.token);\r\n    }\r\n\r\n    if (data && data.context) {\r\n        return {\r\n            type: INIT_CONTEXT,\r\n            User: data.context.User,\r\n            Pages: data.context.Pages,\r\n        } \r\n    } else {\r\n        return {\r\n            type: ERROR,\r\n        }\r\n    }\r\n}\r\n\r\nexport function unmountContext() {\r\n    globalFuncs.removeUserSession();\r\n    return {\r\n        type: UNMOUNT_CONTEXT,\r\n    }\r\n}\r\n\r\n//#endregion\r\n","var globalConsts = {}\n\n//#region SlideOutMenu\n\nglobalConsts.headerButtonMode = {\n    menu: 'menu',\n    back: 'back',\n};\n\nglobalConsts.pageTarget = {\n    blank: 0,\n    root: 1,\n    current: 2,\n};\n\nglobalConsts.pages = {\n    home: {\n        path: '/Home',\n    },\n    signIn: {\n        path: '/SignIn',\n    },\n\n    main: {\n        path: '/Main',\n        title: 'Главная страница',\n    },\n    productsMovements: {\n        path: '/ProductsMovements',\n        title: 'Работа с запасами',\n    },\n    loadProducts: {\n        path: '/LoadProducts',\n    },\n    washPoint: {\n        path: '/WashPoint',\n        title: 'Запуск мойки',\n    }, \n    changeSystemStatus: {\n        path: '/ChangeSystemStatus',\n        title: 'Включение/Выключение системы',\n    },\n    outPoints: {\n        path: '/OutPoints',\n        title: 'Окно выдачи',\n    },\n    generateDocs: {\n        path: '/GenerateDocs', \n        title: 'Отчеты',\n    },\n    docSTFF: {\n        path: '/DocSTFF',\n    },\n    docSells: {\n        path: '/DocSells',\n    },\n    docWashing: {\n        path: '/DocWashing',\n    },\n    menuCategories: {\n        path: '/MenuCategories',\n        title: 'Работа с категориями',\n    },\n    iUCategory: {\n        path: '/IUCategory',\n    },\n    menuDishes: {\n        path: '/MenuDishes',\n        title: 'Работа с меню',\n    },\n    iUDish: {\n        path: '/IUDish',\n    },\n    ovenPoints: {\n        path: '/OvenPoints',\n        title: 'Печи',\n    },\n    operators: {\n        path: '/Operators',\n        title: 'Управление пользователями',\n    },\n    iOperator: {\n        path: '/IOperator',\n    },\n    adBlocks: {\n        path: '/AdBlocks',\n        title: 'Рекламные блоки',\n    },\n    iUAdBlocks: {\n        path: '/IUAdBlocks',\n    },\n    user: {\n        path: '/User',\n        title: 'Личный кабинет'\n    },\n};\n\nglobalConsts.buttons = {\n    logout: {\n        title: 'Выйти из системы',\n    }\n};\n\n//#endregion\n\n//#region Type of operations\n\nglobalConsts.operationTypes = {\n    washing: 'WASHING',\n    load_stff: 'MVMNT_STFF',\n    sysStatus: 'CHANGE_SYS_STATUS',\n}\n\n//#endregion\n\n//#region Type of cntrls\n\nglobalConsts.cntrlsType = {\n    outpoints: 'OutPointCNTRL',\n    ovenpoints: 'OvenPointCNTRL',\n}\n\n//#endregion\n\nglobalConsts.selectDateBox = [\n    {key: 'За последний час', value: 'LH'},\n    {key: 'За сегодня', value: 'TD'}, \n    {key: 'За вчерашний день', value: 'YD'},\n    {key: 'За текущую неделю', value: 'TW'},\n    {key: 'За текущий месяц', value: 'TM'},\n    {key: 'За текущий квартал', value: 'TQ'}, \n    {key: 'За текущий год', value: 'TY'}, \n    {key: 'За последние два дня', value: 'LT'},\n    {key: 'За последний неделю', value: 'LW'}, \n    {key: 'За последний месяц', value: 'LM'}, \n    {key: 'За последний квартал', value: 'LQ'},\n    {key: 'За последний год', value: 'LY'},\n]\n\nexport default globalConsts","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Dx\nimport {\n    Button\n} from 'devextreme-react';\n\n// global\nimport globalConsts from 'js/globalConsts';\n\nclass PBHeader extends React.Component {\n    render() {\n        return (\n            <header className={'pb_header'}>\n                <Button \n                    className={this.props.buttonIcon === globalConsts.headerButtonMode.menu ? 'pb_main_menu_button' : ''}\n                    icon={this.props.buttonIcon}\n                    onClick={this.props.onGoToPageClick}\n                    text={this.props.buttonIcon === globalConsts.headerButtonMode.menu ? 'MENU' : ''}\n                />\n\n                <div className={'pb_header_page_title'}>{'PizzaBot - AdminPanel: ' + this.props.title}</div>\n            </header>\n        )\n    }\n}\n\nPBHeader.propTypes = {\n    buttonIcon: PropTypes.string.isRequired,\n    onGoToPageClick: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n}\n\nexport default PBHeader;","import React from \"react\";\r\nimport {\r\n    Route,\r\n    HashRouter,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n// Dx\r\nimport {\r\n    SlideOutView,\r\n    Template,\r\n    List,\r\n    ScrollView\r\n} from 'devextreme-react';\r\n\r\n// Local cntrls\r\nimport PBHeader from './js/Controls/PBHeader';\r\n\r\n// global\r\nimport globalConsts from 'js/globalConsts';\r\n\r\nclass SlideOutMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            menuVisible: false,\r\n            headerButtonMode: globalConsts.headerButtonMode.menu,\r\n            currentPageTitle: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let startPage = null;\r\n        for (let page in globalConsts.pages) {\r\n            if (globalConsts.pages[page].path === this.hashRouter.history.location.pathname) {\r\n                startPage = globalConsts.pages[page];\r\n                break;\r\n            }\r\n        }\r\n        if (startPage) {\r\n            this.setState({ currentPageTitle: startPage.title });\r\n        }\r\n\r\n        this.hashRouter.history.pizzabot = {\r\n            history: []\r\n        };\r\n\r\n        this.hashRouter.history.pizzabot.push = (params) => {\r\n            if (!params.page) {\r\n                return;\r\n            }\r\n\r\n            let setStateData = {};\r\n\r\n            let t = params.target || globalConsts.pageTarget.blank;\r\n            if (t === globalConsts.pageTarget.root) {\r\n                this.hashRouter.history.pizzabot.history = [];\r\n                setStateData.headerButtonMode = globalConsts.headerButtonMode.menu;\r\n            }\r\n            else if (t === globalConsts.pageTarget.blank) {\r\n                this.hashRouter.history.pizzabot.history.push({\r\n                    pathname: this.hashRouter.history.location.pathname,\r\n                    title: this.state.currentPageTitle,\r\n                    state: params.currentPageState\r\n                });\r\n                setStateData.headerButtonMode = globalConsts.headerButtonMode.back;\r\n            }\r\n\r\n            this.hashRouter.history.push({\r\n                pathname: params.page.path,\r\n                state: params.state\r\n            });\r\n\r\n            setStateData.currentPageTitle = params.page.title;\r\n            this.setState(setStateData);\r\n        };\r\n\r\n        this.hashRouter.history.pizzabot.canBack = () => {\r\n            return this.hashRouter.history.pizzabot.history.length > 0;\r\n        };\r\n\r\n        this.hashRouter.history.pizzabot.back = () => {\r\n            if (this.hashRouter.history.pizzabot.canBack()) {\r\n                let prevPage = this.hashRouter.history.pizzabot.history.pop();\r\n                this.setState({ currentPageTitle: prevPage.title });\r\n                this.hashRouter.history.push({\r\n                    pathname: prevPage.pathname,\r\n                    state: prevPage.state\r\n                });\r\n\r\n                if (!this.hashRouter.history.pizzabot.canBack()) {\r\n                    this.setState({ headerButtonMode: globalConsts.headerButtonMode.menu });\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({ menuVisible: true });\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({ menuVisible: false });\r\n    }\r\n\r\n    menuItemClick = (e) => {\r\n        this.hashRouter.history.pizzabot.push({\r\n            page: e.page,\r\n            target: globalConsts.pageTarget.root\r\n        });\r\n        this.hide();\r\n    }\r\n\r\n    headerButtonOnClick = (e) => {\r\n        if (this.state.headerButtonMode === globalConsts.headerButtonMode.menu) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hashRouter.history.pizzabot.back();\r\n        }\r\n    }\r\n\r\n    getAvailablePageIndexFromPath(path) {\r\n        var locationHash = path.replace('/', '')\r\n        locationHash = locationHash.charAt(0).toLowerCase() + locationHash.substring(1);\r\n\r\n        return locationHash;\r\n    }\r\n\r\n    renderListItem = (e, availablePages) => {\r\n        if (e.page) {\r\n            var locationHash = this.getAvailablePageIndexFromPath(e.page.path);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div>\r\n                    {e.page && availablePages.indexOf(locationHash) >= 0 && \r\n                        <div \r\n                            onClick={() => { this.menuItemClick(e); }} \r\n                            className={\"pb_slideout_menu_item dx-navigation-item \" + (window.location.hash.indexOf(e.page.path.replace('/', '')) !== -1 ? 'font-weight-bold' : '')}\r\n                        >\r\n                            {e.page.title}\r\n                        </div>\r\n                    }\r\n                    {e.button &&\r\n                        <div\r\n                            onClick={() => { e.action(); }}\r\n                            className={\"pb_slideout_menu_item dx-navigation-item\"}\r\n                        > \r\n                            {e.button.title}\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter ref={x => this.hashRouter = x} hashType={'noslash'}>\r\n                {this.props.defaultPage && \r\n                    <Redirect exact from=\"/\" to={'/' + this.props.defaultPage} />\r\n                }\r\n                <div className=\"pb_slideout_container\">\r\n                    <SlideOutView\r\n                        menuTemplate=\"menu\"\r\n                        contentTemplate=\"content\"\r\n                        menuVisible={this.state.menuVisible}\r\n                        onOptionChanged={(e) => {\r\n                            if (e.name === \"menuVisible\") {\r\n                                this.setState({ menuVisible: e.value });\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Template name=\"menu\">\r\n                            <List\r\n                                dataSource={\r\n                                    this.props.menuItems.filter(\r\n                                        item => \r\n                                            item.visible && \r\n                                            (\r\n                                                (\r\n                                                    item.page && \r\n                                                    this.props.availablePages && \r\n                                                    this.props.availablePages.indexOf(this.getAvailablePageIndexFromPath(item.page.path)) >= 0\r\n                                                ) ||\r\n                                                item.button\r\n                                            )\r\n                                    )\r\n                                }\r\n                                itemRender={(e) => this.renderListItem(e, this.props.availablePages)}\r\n                                width=\"350px\"\r\n                            />\r\n                        </Template>\r\n\r\n                        <Template name=\"content\">\r\n                            <div className=\"d-flex flex-column h-100\">\r\n                                <PBHeader\r\n                                    buttonIcon={this.state.headerButtonMode}\r\n                                    onGoToPageClick={this.headerButtonOnClick}\r\n                                    title={this.state.currentPageTitle}\r\n                                />\r\n                                <ScrollView>\r\n                                    <div className=\"pb_main_content_holder\">\r\n                                        {this.props.menuItems.map((e, i) => {\r\n                                            if (e.page) {\r\n                                                var locationHash = this.getAvailablePageIndexFromPath(e.page.path);\r\n                                            }\r\n\r\n                                            if (this.props.availablePages && this.props.availablePages.indexOf(locationHash) >= 0) {\r\n                                                return <Route exact key={i} path={e.page.path} component={e.component} />\r\n                                            }\r\n\r\n                                            return <React.Fragment key={i}> </React.Fragment>\r\n                                        })}\r\n                                    </div>\r\n                                </ScrollView>\r\n                            </div>\r\n                        </Template>\r\n                    </SlideOutView>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nSlideOutMenu.propTypes = {\r\n    defaultPage: PropTypes.string,\r\n    menuItems: PropTypes.array.isRequired,\r\n    availablePages: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default SlideOutMenu;","import React from 'react';\n\n// Dx\nimport { Button } from 'devextreme-react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    goToPage,\n    changeVisibilityOfLoadingPanel,\n} from 'js/Redux/actions';\n\n// Global\nimport globalFuncs from 'js/globalFuncs';\n\nclass HomePage extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.welcomeMsg = 'Добро пожаловать в административную панель PizzaBot';\n        this.forStartWorkMsg = 'Для начала работы, пожалуйста, авторизуйтесь';\n        this.supportMsg = 'Для получения логина и пароля обратитесь к администратору';\n\n        this.handleGoToSignInPage = this.handleGoToSignInPage.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            dispatch\n        } = this.props;\n        dispatch(changeVisibilityOfLoadingPanel(false));\n    }\n\n    handleGoToSignInPage() {\n        const {\n            dispatch \n        } = this.props;\n\n        dispatch(goToPage('SignIn'));\n    }\n\n    render() {\n        return (\n            <>\n                <div className={'text-center mt-5 mb-4 hp_div'}>\n                    <h3 className={'mb-3'}>{this.welcomeMsg}</h3>\n                    <div className={'mb-3'}> \n                        {true && \n                            <img \n                                src={'/themes/images/NoImageIcon.png'} \n                                alt={'No image'}\n                            />\n                        }\n                        {false &&\n                            <img alt={'Welcome image'}/>\n                        }\n                    </div>\n                    <h5 className={'mb-4'}>{this.forStartWorkMsg}</h5>\n                    <h5>{this.supportMsg}</h5>\n                </div>\n                <div className={'hp_footer text-center'}>\n                    <Button \n                        onClick={this.handleGoToSignInPage} \n                        text={'Начать работу'}\n                        height={'50px'}\n                        width={'80%'}\n                    />\n                </div>\n            </>\n        )\n    }\n}\n\nHomePage = connect(globalFuncs.mapStateToProps_global)(HomePage)\nexport default HomePage;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel,\n    initContext\n} from 'js/Redux/actions';\n\n// Global\nimport globalFuncs from 'js/globalFuncs';\n\n// Dx\nimport { \n    TextBox,\n    Button,\n} from 'devextreme-react'\n\nclass SignInAdmin extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            login: '',\n            password: '',\n\n            showErrorMsg: false,\n        }\n\n        this.handleLoginChanged = this.handleLoginChanged.bind(this);\n        this.handlePasswordChanged = this.handlePasswordChanged.bind(this);\n        this.handleSignInClick = this.handleSignInClick.bind(this);\n        this.handleFocusOnConrol = this.handleFocusOnConrol.bind(this);\n    }\n\n    handleFocusOnConrol(args) {\n        console.log(args);\n    }\n\n    handleLoginChanged(args) {\n        this.setState(() => {\n            return {\n                login: args.value,\n            }\n        });\n    }\n\n    handlePasswordChanged(args) {\n        this.setState(() => {\n            return {\n                password: args.value,\n            }\n        })\n    }\n\n    handleSignInClick() {\n        const {\n            login,\n            password\n        } = this.state;\n\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/users/signin',\n            {\n                login,\n                password\n            },\n            (response) => {\n                this.setState(() => {\n                    return {\n                        showErrorMsg: false,\n                    }\n                })\n                dispatch(initContext(response));\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                this.setState(() => {\n                    return {\n                        showErrorMsg: true,\n                    }\n                })\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    render() {\n        const {\n            login, \n            password,\n\n            showErrorMsg\n        } = this.state;\n\n        return (\n            <> \n                <div className={'text-center mt-5 mb-4 sign_in_div'}>\n                    <div className={'mb-3'}> \n                        {true && \n                            <img \n                                src={'/themes/images/NoImageIcon.png'} \n                                alt={'No image'}\n                            />\n                        }\n                        {false &&\n                            <img alt={'Welcome image'}/>\n                        }\n                    </div>\n                    <h1>Авторизация</h1>\n                    <div className={'sign_in_form'}>\n                        <div className={'form-group text-left'}>\n                            <label>Номер телефона:</label>\n                            <TextBox\n                                mode={'tel'}\n                                mask={'+7 (000) 000-00-00'}\n                                placeholder={'Введите номер телефона...'}\n                                value={login}\n                                isValid={!showErrorMsg}\n                                onValueChanged={this.handleLoginChanged}\n                                onEnterKey={this.handleSignInClick}\n                                onFocusIn={this.handleFocusOnConrol}\n                            />\n                        </div>\n                        <div className={'form-group text-left mb-4'}>\n                            <label>Пароль:</label>\n                            <TextBox \n                                mode={'password'}\n                                isValid={!showErrorMsg}\n                                placeholder={'Введите пароль...'}\n                                value={password}\n                                onValueChanged={this.handlePasswordChanged}\n                                onEnterKey={this.handleSignInClick}\n                            />\n                        </div>\n                        <Button \n                            onClick={this.handleSignInClick} \n                            text={'Войти'}\n                            height={'50px'}\n                            width={'80%'}\n                        />\n                        <div className={'mt-4 row justify-content-center'}>\n                            <div className={'col-1 text-right pr-0'}>\n                                <img \n                                    className={'mt-1'}\n                                    src={'/themes/images/KeyIcon.png'}\n                                    alt={'Key'}\n                                />\n                            </div>\n                            <div className={'col-md-2 col-6 text-left sing_in_footer_msg'}>\n                                <small className={'form-text text-muted'}>\n                                    Забыли пароль? <br/>\n                                    Обратитесь к администратору\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nSignInAdmin = connect(globalFuncs.mapStateToProps_global)(SignInAdmin);\nexport default SignInAdmin;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    DataGrid\n} from 'devextreme-react';\nimport {\n    Column\n} from 'devextreme-react/data-grid';\nimport DataSource from 'devextreme/data/data_source';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\n\nclass MainInfoPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numberOfOrdersNow: 0,\n            numberOfAllOrdersToday: 0,\n            numberOfErrors: 0,\n            numberOfDishesAreUnavailable: 0,\n\n            stffs: [],\n        }\n    }\n\n    componentDidMount() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/point/get_system_statistics',\n            {\n                //point_refid\n            },\n            (response) => {\n                if (response) {\n                    var numberOfOrdersNow = 0;\n                    var numberOfAllOrdersToday = 0;\n                    var numberOfDishesAreUnavailable = 0\n                    var numberOfErrors = 0;\n\n                    if (response.OrdersNow) {\n                        numberOfOrdersNow = response.OrdersNow;\n                    }\n                    if (response.OrdersToday) {\n                        numberOfAllOrdersToday = response.OrdersToday;\n                    }\n                    if (response.CountOfUnavailableDishes) {\n                        numberOfDishesAreUnavailable = response.CountOfUnavailableDishes;\n                    }\n                    if (response.CountOfErrors) {\n                        numberOfErrors = response.CountOfErrors;\n                    }\n\n                    this.setState({\n                        numberOfAllOrdersToday,\n                        numberOfOrdersNow,\n                        numberOfErrors,\n                        numberOfDishesAreUnavailable\n                    });\n                    this.loadSTFFData();\n                }\n            },\n            (reponse) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    parseToDateSourse(dataSource) {\n        return new DataSource({\n            loadMode: \"raw\",\n            pageSize: 10,\n            paginate: true,\n            store: {\n                type: \"array\",\n                data: dataSource\n            }\n        });\n    }\n \n    loadSTFFData() {\n        const {\n            dispatch\n        } = this.props;\n\n        globalFuncs.sendRequest(\n            'POST',\n            '/stffs/get_count_of_stffs',\n            {\n                //point_refid\n            },\n            (response) => {\n                if (response && response.STFFCount) {\n                    this.setState({\n                        stffs: this.parseToDateSourse(response.STFFCount),\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    render() {\n        const {\n            numberOfAllOrdersToday,\n            numberOfOrdersNow,\n            numberOfDishesAreUnavailable,\n            numberOfErrors,\n\n            stffs,\n        } = this.state;\n\n        return (\n            <> \n                <div className={'mip_div mt-2'}>\n                    <div className={'row text-center mb-4'}> \n                        <div className={'col-6'}>\n                            <h5 className={'text-muted'}>№ заказов в работе</h5>\n                            <div className={'font-weight-bold'} style={{fontSize: '25px'}}>\n                                {numberOfOrdersNow}\n                            </div>\n                        </div>\n                        <div className={'col-6'}>\n                            <h5 className={'text-muted'}>№ всех заказов за день</h5>\n                            <div className={'font-weight-bold'} style={{fontSize: '25px'}}>\n                                {numberOfAllOrdersToday}\n                            </div>\n                        </div>\n                    </div>\n                    <div className={'row mb-2'}>\n                        <div className={'col-5 text-right'}>\n                            <div className={'rounded-circle round-right ' + (numberOfDishesAreUnavailable > 0 ? 'round-red' : 'round-green')}></div>\n                        </div>\n                        <div className={'col-7'}>\n                            <h5 className={'mb-1'}>Меню</h5>\n                            <label>\n                                {numberOfDishesAreUnavailable > 0 ? `В продаже нет ${numberOfDishesAreUnavailable} блюд` : 'Все блюда в продаже'}\n                            </label>\n                        </div>\n                    </div>\n                    <div className={'row'}>\n                        <div className={'col-5'}>\n                            <div className={'rounded-circle round-right ' + (numberOfErrors > 0 ? 'round-red' : 'round-green')}></div>\n                        </div>\n                        <div className={'col-7'}>\n                            <h5 className={'mb-1'}>Сбои в работе</h5>\n                            <label>\n                                {numberOfErrors > 0 ? `Найдено ${numberOfErrors} ошибки` : 'Киоск работает исправно'}\n                            </label>\n                        </div>\n                    </div>\n                    <hr />\n                    <div className={'text-center'}>\n                        <h5 className={'text-muted'}>Скоро закончатся</h5>\n                        <DataGrid\n                            showColumnHeaders={false}\n                            showBorders={true}\n                            showColumnLines={false}\n                            showRowLines={true}\n                            width={'100%'}\n                            defaultPager={{\n                                showInfo: true,\n                                showNavigationButtons: true,\n                                visible: true,\n                                customModeEnabled: true,\n                            }}\n                            noDataText=\"Полуфабрикатов нет в системе\"\n                            columnAutoWidth={true}\n                            defaultScrolling={{\n                                showScrollbar: \"always\"\n                            }}\n                            wordWrapEnabled={true}\n                            loadPanel={{enabled: false}}\n                            dataSource={stffs}\n                        >\n                            <Column \n                                caption={'Полуфабрикат'}\n                                dataField={'stffname'}\n                                allowHiding={false}\n                                allowReordering={false}\n                                visible={true}\n                            />\n                            <Column\n                                caption={'Количество'}\n                                dataField={'balance'}\n                                allowHiding={false}\n                                allowReordering={true}\n                                visible={true}\n                            />\n                        </DataGrid>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nMainInfoPage = connect(globalFuncs.mapStateToProps_global)(MainInfoPage);\nexport default MainInfoPage;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    Button\n} from 'devextreme-react';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\n\nclass ChangeSystemStatus extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mode: '',\n            lastAction: null,\n        }\n\n        this.handleChangeStatusOfTheSystem = this.handleChangeStatusOfTheSystem.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const {\n            dispatch,\n            context,\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/point/get_system_status',\n            {\n                address: 'Плеханова 58а',\n                userprofilerefid: context.User.Profile.RefID,\n            },\n            (response) => {\n                if (response && response.Status) {\n                    this.setState({\n                        mode: response.Status,\n                    });\n                    dispatch(changeVisibilityOfLoadingPanel(true));\n                    globalFuncs.sendRequest(\n                        'POST',\n                        '/operator/action_history',\n                        {\n                            operationtype: globalConsts.operationTypes.sysStatus,\n                            last_action: true,\n                        },\n                        (response) => {\n                            if (response && response.Operations && response.Operations.length > 0) {\n                                var lastAction = response.Operations[0];\n                                this.setState({\n                                    lastAction,\n                                })\n                            }\n                            dispatch(changeVisibilityOfLoadingPanel(false));\n                        },\n                        (response) => {\n                            dispatch(changeVisibilityOfLoadingPanel(false));\n                        }\n                    )\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        );\n    }\n\n    handleChangeStatusOfTheSystem() {\n        const {\n            dispatch\n        } = this.props;\n\n        const {\n            mode\n        } = this.state;\n\n        var jsondata = 'OFF'\n        switch(mode) {\n            case 'ON':\n            case 'ON AFTER CRITICAL ERROR':\n                jsondata = 'OFF'\n                break;\n            case 'OFF':\n                jsondata = 'ON'\n                break;\n            case 'OFF AFTER CRITICAL ERROR':\n                jsondata = 'ON AFTER CRITICAL ERROR'\n                break;\n            default: \n                break;\n        }\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        /*globalFuncs.sendRequest(\n            'POST',\n            '/pc/send_query', \n            {\n                methodName: 'turn_off',\n                jsondata: jsondata\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )*/\n    }\n\n    render() {\n        const {\n            mode,\n            lastAction,\n        } = this.state;\n\n        if (lastAction) {\n            var data = JSON.parse(lastAction.data);\n            var date = new Date(lastAction.dateofoperation);\n        }\n\n        return (\n            <> \n                <div className={'css_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Включение системы</h3>\n                        {mode !== 'LATER' &&\n                            <h5 className={'text-muted text-justify pl-2 pr-2'}>\n                                Внимание! Перед запуском системы сделайте то, и это, и, разумеется еще и это. \n                                Внимание! Перед запуском системы сделайте то, и это, и, разумеется еще и это.\n                            </h5>\n                        }\n                        {mode === 'LATER' &&\n                            <div className={'text-justify pl-2 pr-2'}> \n                                <h5>Система была выключена аварийно. Позовите администратора, чтобы включить ее.</h5>\n                            </div>\n                        }\n                        {(mode === 'ON' || mode === 'ON AFTER CRITICAL ERROR') && \n                            <div className={'css_strt_bttn text-center'}>\n                                <Button \n                                    onClick={this.handleChangeStatusOfTheSystem} \n                                    text={'Выключить систему'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        }\n                        {mode === 'OFF' && \n                            <div className={'css_strt_bttn text-center'}>\n                                <Button \n                                    onClick={this.handleChangeStatusOfTheSystem} \n                                    text={'Включить систему'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        }\n                        {mode === 'OFF AFTER CRITICAL ERROR' &&\n                            <div className={'css_strt_bttn text-center'}>\n                                <Button \n                                    onClick={this.handleChangeStatusOfTheSystem} \n                                    text={'Полная проверка системы'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        } \n                    </div>\n                    {lastAction &&\n                        <div className={'css_history_div'}>\n                            {data.prevMode === 'ON' &&\n                                <h5 className={'pl-2'}>Включение системы</h5>\n                            }\n                            {data.prevMode === 'OFF' &&\n                                <h5 className={'pl-2'}>Выключение системы</h5>\n                            }\n                            {data.prevMode === 'ON AFTER CRITICAL ERROR' &&\n                                <h5 className={'pl-2'}>Включение после критической ошибки</h5>\n                            }\n                            {data.prevMode === 'OFF AFTER CRITICAL ERROR' &&\n                                <h5 vclassName={'pl-2'}>Выключение после критической ошибки</h5>\n                            }\n                            <div className={'mb-2 text-muted pl-4'} dangerouslySetInnerHTML={{__html: data.msg}} />\n                            <label className={'pl-2'}>\n                                {'Вызвано: ' + lastAction.operatorfi + ''} <br /> \n                                {'Дата: ' + date.toLocaleDateString() + ', ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                            </label>\n                        </div>\n                    }\n                </div>\n            </>\n        )\n    }\n}\n\nChangeSystemStatus = connect(globalFuncs.mapStateToProps_global)(ChangeSystemStatus);\nexport default ChangeSystemStatus;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    initContext,\n    changeVisibilityOfLoadingPanel,\n    clearAllLoadingPanels\n} from 'js/Redux/actions';\n\n// Dx\nimport { \n    TextBox\n} from 'devextreme-react';\nimport validationEngine from 'devextreme/ui/validation_engine';\nimport {\n    Validator,\n    RequiredRule,\n    CompareRule,\n    EmailRule,\n    PatternRule,\n    StringLengthRule,\n    RangeRule,\n    NumericRule\n} from 'devextreme-react/validator';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\n\nclass PersonalCab extends React.Component {\n    constructor(props){\n        super(props);\n\n        const {\n            context\n        } = this.props;\n\n        this.state = {\n            isEditMode: false,\n\n            User: context.User,\n            pwd: {}\n        }\n\n        this.handleEditPersonalInfo = this.handleEditPersonalInfo.bind(this);\n        this.handleChangeNameField = this.handleChangeNameField.bind(this);\n        this.handleChangeSNameField = this.handleChangeSNameField.bind(this);\n        this.handleChangeLNameField = this.handleChangeLNameField.bind(this);\n        this.handleChangeEmailField = this.handleChangeEmailField.bind(this);\n        this.handleChangePhoneField = this.handleChangePhoneField.bind(this);\n\n        this.handleChangeOldPwd = this.handleChangeOldPwd.bind(this);\n        this.handleChangeNewPwd = this.handleChangeNewPwd.bind(this);\n        this.handleChangeAcceptNewPwd = this.handleChangeAcceptNewPwd.bind(this);\n\n        this.handleFinishEditing = this.handleFinishEditing.bind(this);\n    }\n\n    handleFinishEditing() {\n        this.setState((state, props) => {\n            return {\n                isEditMode: false,\n                pwd: {},\n                User: props.context.User,\n            }\n        })\n    }\n\n    handleEditPersonalInfo() {\n        if (this.state.isEditMode) {\n            var allFieldValidation = validationEngine.validateGroup();\n            if (!allFieldValidation.isValid) return;\n\n            const {\n                dispatch\n            } = this.props;\n            dispatch(changeVisibilityOfLoadingPanel(true));\n\n            const {\n                User,\n                pwd\n            } = this.state;\n\n            globalFuncs.sendRequest(\n                'POST',\n                '/users/update',\n                {\n                    refid: User.RefID,\n                    userfn: User.FirstName,\n                    usersn: User.SecondName,\n                    userln: User.LastName,\n                    useremail: User.Email,\n                    userphone: User.Phone,\n                    oldpwd: pwd.oldPwd,\n                    execby: User.FirstName + ' ' + User.LastName,\n                },\n                (response) => {\n                    if (response && response.isSuccess) {\n                        const {\n                            User\n                        } = this.state;\n                        dispatch(initContext({\n                            context: {\n                                User,\n                            }\n                        }));\n                    }\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                },\n                (response) => {\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                }\n            )\n        }\n\n        this.setState((state) => {\n            const {\n                isEditMode\n            } = state;\n\n            return {\n                isEditMode: !isEditMode\n            }\n        })\n    }\n    \n    //#region Change events\n\n    handleChangeNameField(args) {\n        this.setState((state) => {\n            var {\n                User\n            } = state;\n            User = Object.assign({}, User, {\n                FirstName: args.value,\n            });\n            return {\n                User\n            }\n        });\n    }\n\n    handleChangeSNameField(args) {\n        this.setState((state) => {\n            var {\n                User\n            } = state;\n            User = Object.assign({}, User, {\n                SecondName: args.value,\n            });\n            return {\n                User\n            }\n        });\n    }\n\n    handleChangeLNameField(args) {\n        this.setState((state) => {\n            var {\n                User\n            } = state;\n            User = Object.assign({}, User, {\n                LastName: args.value,\n            });\n            return {\n                User\n            }\n        });\n    }\n\n    handleChangeEmailField(args) {\n        this.setState((state) => {\n            var {\n                User\n            } = state;\n            User = Object.assign(User, {\n                Email: args.value,\n            });\n            return {\n                User\n            }\n        });\n    }\n\n    handleChangePhoneField(args) {\n        this.setState((state) => {\n            var {\n                User\n            } = state;\n            User = Object.assign(User, {\n                Phone: args.value,\n            });\n            return {\n                User\n            }\n        });\n    }\n\n    //#region Change pwd\n\n    handleChangeOldPwd(args) {\n        this.setState((state) => {\n            var {\n                pwd\n            } = state;\n            pwd = Object.assign(pwd, {\n                oldPwd: args.value\n            });\n            return {\n                pwd,\n            }\n        })\n    }\n\n    handleChangeNewPwd(args) {\n        this.setState((state) => {\n            var {\n                pwd\n            } = state;\n            pwd = Object.assign(pwd, {\n                newPwd: args.value\n            });\n            return {\n                pwd,\n            }\n        })\n    }\n\n    handleChangeAcceptNewPwd(args) {\n        this.setState((state) => {\n            var {\n                pwd\n            } = state;\n            pwd = Object.assign(pwd, {\n                checkNewPwd: args.value\n            });\n            return {\n                pwd,\n            }\n        })\n    }\n\n    //#endregion\n\n    //#endregion\n\n    render() {\n        const {\n            isEditMode,\n            User,\n            pwd,\n        } = this.state;\n\n        const {\n            FirstName,\n            SecondName,\n            RoleName\n        } = this.props.context.User;\n\n        return (\n            <> \n                <div className={'text-center mt-2 mb-4 pc_div'}>\n                    <div className={'mb-3'}> \n                        {true && \n                            <img \n                                src={'/themes/images/NoAvatarImage.png'} \n                                alt={'No image'}\n                            />\n                        }\n                        {false &&\n                            <img alt={'Welcome image'}/>\n                        }\n                    </div>\n                    <h3 className={'font-weight-bold'}>{FirstName + ' ' + SecondName}</h3>\n                    <h5 className={'text-muted'}>{RoleName}</h5>\n                </div>\n                <div className={'pc_edit_bttn_container'}>\n                    <div \n                        className={'row justify-content-center'}\n                        onClick={this.handleEditPersonalInfo}\n                    >\n                        <div className={'col-1 text-right pr-0'}>\n                            <img \n                                className={'mt-1 pc_edit_img'}\n                                src={isEditMode \n                                    ? '/themes/images/AcceptIcon.png'\n                                    : '/themes/images/EditIcon.png'\n                                }\n                                alt={'Key'}\n                            />\n                        </div>\n                        <div className={'col-md-2 col-6 text-right pc_footer_msg'}>\n                            <label className={'form-text text-muted'}>\n                                {isEditMode ? 'Применить' : 'Редактировать'}\n                            </label>\n                        </div>\n                    </div>\n                    {isEditMode && \n                        <div \n                            className={'row justify-content-center'}\n                            onClick={this.handleFinishEditing}\n                        >\n                            <div className={'col-1 text-right pr-0'}>\n                                <img \n                                    className={'mt-1 pc_edit_img'}\n                                    src={'themes/images/CloseIcon.png'}\n                                    alt={'Key'}\n                                />\n                            </div>\n                            <div className={'col-md-2 col-6 text-right pc_footer_msg'}>\n                                <label className={'form-text text-muted'}>\n                                    {'Закрыть'}\n                                </label>\n                            </div>\n                        </div>\n                    }   \n                </div>\n                <hr className={'mt-1'} />\n                <div className={'pc_main_content'}>\n                    <div className={'form-group row'}>\n                        <label className={'col-3 col-form-label'}>Имя</label>\n                        <div className={'col-9'}>\n                            <TextBox \n                                readOnly={!isEditMode}\n                                value={User.FirstName}\n                                mode={'text'}\n                                placeholder={'Введите имя...'}\n                                onValueChanged={this.handleChangeNameField}\n                            > \n                                <Validator>\n                                    <RequiredRule message={'Имя пользователя обязательно для заполнения'} />\n                                </Validator>\n                            </TextBox>\n                        </div>\n                    </div>\n                    <div className={'form-group row'}>\n                        <label className={'col-3 col-form-label'}>Фамилия</label>\n                        <div className={'col-9'}>\n                            <TextBox \n                                readOnly={!isEditMode}\n                                value={User.SecondName}\n                                mode={'text'}\n                                placeholder={'Введите фамилию...'}\n                                onValueChanged={this.handleChangeSNameField}\n                            >\n                                <Validator>\n                                    <RequiredRule message={'Фамилия пользователя обязательно для заполнения'} />\n                                </Validator>\n                            </TextBox>\n                        </div>\n                    </div>\n                    <div className={'form-group row'}>\n                        <label className={'col-3 col-form-label'}>Отчество</label>\n                        <div className={'col-9'}>\n                            <TextBox \n                                readOnly={!isEditMode}\n                                value={User.LastName}\n                                mode={'text'}\n                                placeholder={'Введите отчество (если имеется)...'}\n                                onValueChanged={this.handleChangeLNameField}\n                            />\n                        </div>\n                    </div>\n                    <div className={'form-group row'}>\n                        <label className={'col-3 col-form-label'}>Email</label>\n                        <div className={'col-9'}>\n                            <TextBox \n                                readOnly={!isEditMode}\n                                value={User.Email}\n                                mode={'email'}\n                                placeholder={'Введите email...'}\n                                onValueChanged={this.handleChangeEmailField}\n                            >\n                                <Validator>\n                                    <RequiredRule message={'Email пользователя обязательно для заполнения'} />\n                                </Validator>\n                            </TextBox>\n                        </div>\n                    </div>\n                    <div className={'form-group row'}>\n                        <label className={'col-3 col-form-label'}>Телефон</label>\n                        <div className={'col-9'}>\n                            <TextBox \n                                readOnly={!isEditMode}\n                                value={User.Phone}\n                                mode={'tel'}\n                                mask={'+7 (000) 000-00-00'}\n                                placeholder={'Введите номер телефона...'}\n                                onValueChanged={this.handleChangePhoneField}\n                            >\n                                <Validator>\n                                    <RequiredRule message={'Номер телефона пользователя обязательно для заполнения'} />\n                                </Validator>\n                            </TextBox>\n                        </div>\n                    </div>\n                    {isEditMode && \n                        <>\n                            <div className={'form-group row'}>\n                                <label className={'col-3 col-form-label'}>Текущий</label>\n                                <div className={'col-9'}>\n                                    <TextBox \n                                        mode={'password'}\n                                        placeholder={'Введите старый пароль...'}\n                                        onValueChanged={this.handleChangeOldPwd}\n                                    >\n                                        <Validator>\n                                            <RequiredRule message={'Пароль пользователя обязательно для заполнения'} />\n                                        </Validator>\n                                    </TextBox>\n                                </div>\n                            </div>\n                            <div className={'form-group row'}>\n                                <label className={'col-3 col-form-label'}>Новый</label>\n                                <div className={'col-9'}>\n                                    <TextBox \n                                        mode={'password'}\n                                        placeholder={'Введите новый пароль...'}\n                                        value={pwd.newPwd}\n                                        onValueChanged={this.handleChangeNewPwd} />\n                                </div>\n                            </div>\n                            {pwd.newPwd && \n                                <div className={'form-group row'}>\n                                    <label className={'col-3 col-form-label'}>Подтвердить</label>\n                                    <div className={'col-9'}>\n                                        <TextBox \n                                            mode={'password'}\n                                            placeholder={'Подтвердите новый пароль...'}\n                                            value={pwd.checkNewPwd}\n                                            onValueChanged={this.handleChangeAcceptNewPwd}\n                                        >\n                                            <Validator>\n                                                <CompareRule message={'Новые пароли не совпадают'} comparisonTarget={() => { return pwd.newPwd === pwd.checkNewPwd }} />\n                                            </Validator>\n                                        </TextBox>\n                                    </div>\n                                </div>\n                            }\n                        </>\n                    }\n                </div>\n            </>\n        )\n    }\n}\n\nPersonalCab = connect(globalFuncs.mapStateToProps_global)(PersonalCab);\nexport default PersonalCab;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass WashingHistoryLine extends React.Component {\n    render() {\n        var {\n            execBy,\n            actionTypeData, \n            date\n        } = this.props;\n\n        actionTypeData = JSON.parse(actionTypeData);\n\n        return (\n            <div className={'pb-2 pt-1'}>\n                <h5>{actionTypeData.washingType}</h5>\n                <div className={'row'}>\n                    <div className={'col-8 text-left'}>\n                        {execBy}\n                    </div>\n                    <div className={'col-4 row text-right'}>\n                        <div className={'col-12'}>\n                            {date.toLocaleDateString()}\n                        </div>\n                        <div className={'col-12'}>\n                            {date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nWashingHistoryLine.propTypes = {\n    execBy: PropTypes.string.isRequired,\n    actionTypeData: PropTypes.string.isRequired,\n    date: PropTypes.instanceOf(Date).isRequired,\n}\n\nexport default WashingHistoryLine","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel\n} from 'js/Redux/actions';\n\n// Dx \nimport { \n    Button,\n    SelectBox,\n    List,\n} from 'devextreme-react';\n\n// Local\nimport WashingHistoryLine from './WashingHistoryLine';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\nimport moment from 'moment';\n\nclass WashingPoint extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lastActions: null,\n            mode: 'HistoryView',\n\n            washingTypeSource: [],\n            washingType: '',\n            washingTypeValue: '',\n        }\n\n        this.handleStartWashing = this.handleStartWashing.bind(this);\n        this.handleCancelWashing = this.handleCancelWashing.bind(this);\n        this.handleSendWashingComand = this.handleSendWashingComand.bind(this);\n        this.handleChangeWashingType = this.handleChangeWashingType.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadHistoryOfWashing();\n    }\n\n    loadHistoryOfWashing() {\n        const {\n            dispatch\n        } = this.props;\n        dispatch(changeVisibilityOfLoadingPanel(true));\n\n        globalFuncs.sendRequest(\n            'POST',\n            '/operator/action_history',\n            {\n                operationtype: globalConsts.operationTypes.washing,\n                datefrom: moment.utc().set({ 'hours': 0, 'minute': 0, 'second': 0 }),\n                dateto: moment.utc().set({ 'hours': 23, 'minute': 59, 'second': 59 }),\n            },\n            (response) => {\n                if (response && response.Operations) {\n                    this.setState((state) => {\n                        var { \n                            lastActions\n                        } = state;\n                        lastActions = Object.assign(\n                            [],\n                            lastActions,\n                            response.Operations,\n                        );\n                        return {\n                            lastActions\n                        }\n                    });\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                }\n            },\n            () => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    handleStartWashing() {\n        const {\n            dispatch\n        } = this.props;\n\n        if (this.state.washingTypeSource.length < 1) {\n            dispatch(changeVisibilityOfLoadingPanel(true));\n            globalFuncs.sendRequest(\n                'POST',\n                '/general/typecodes',\n                {\n                    typename: 'WashingType'\n                },\n                (response) => {\n                    if (response) {\n                        this.setState({\n                            washingTypeSource: response.typeCodeData,\n                            mode: 'StartWashingMode'\n                        });\n                    }\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                },\n                () => {\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                }\n            )\n            return;\n        }\n        \n        this.setState({\n            mode: 'StartWashingMode',\n        });\n    }\n\n    handleCancelWashing() {\n        this.setState({\n            mode: 'HistoryView',\n        });\n    }\n\n    handleSendWashingComand() {\n        const {\n            User\n        } = this.props.context;\n\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/operator/add_history',\n            {\n                userrefid: User.RefID,\n                actiontype: globalConsts.operationTypes.washing,\n                actioncontent: JSON.stringify({washingType: this.state.washingType})\n            },\n            (response) => {\n                if (response && response.insertSuccess) {\n                    this.setState({\n                        mode: 'HistoryView',\n                        washingType: '',\n                        washingTypeValue: '',\n                    });\n                    this.loadHistoryOfWashing();\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            () => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    handleChangeWashingType(args) {\n        this.setState({\n            washingType: globalFuncs.findValueInJson(this.state.washingTypeSource, args.value, 'typedescription', 'typevalue'),\n            washingTypeValue: args.value,\n        });\n    }\n\n    render() {\n        const {\n            lastActions,\n            mode,\n            washingTypeSource,\n            washingTypeValue\n        } = this.state;\n\n        return (\n            <> \n                <div className={'wp_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Запустить мойку</h3>\n                        <h5 className={'text-muted text-justify pl-2 pr-2'}>\n                            Внимание! Перед запуском мойки сделайте то, и это, и, разумеется еще и это. \n                            Внимание! Перед запуском мойки сделайте то, и это, и, разумеется еще и это.\n                        </h5>\n                        {mode === 'HistoryView' && \n                            <div className={'wp_strt_bttn text-center'}>\n                                <Button \n                                    onClick={this.handleStartWashing} \n                                    text={'Запустить мойку'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        }\n                        {mode === 'StartWashingMode' && \n                            <div className={'wp_strt_bttn text-center'}>\n                                <Button \n                                    onClick={this.handleCancelWashing} \n                                    text={'Отменить мойку'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        }\n                    </div>\n                    {mode === 'HistoryView' && \n                        <div className={'pl-2 pr-2'}>\n                            {lastActions &&\n                                <h5 className={'text-left'}>Последние действия</h5>\n                            }\n                            <List \n                                dataSource={lastActions}\n                                noDataText={'Мойка в кафе не производилась'}\n                                height={'100%'}\n                                focusStateEnabled={false}\n                                hoverStateEnabled={false}\n                                activeStateEnabled={false}\n                                itemRender={(e) => {\n                                    return (\n                                        <WashingHistoryLine \n                                            execBy={e.operatorfi}\n                                            actionTypeData={e.data}\n                                            date={new Date(e.dateofoperation)}\n                                        />\n                                    )\n                                }}\n                            />\n                        </div>\n                    }\n                    {mode === 'StartWashingMode' && \n                        <> \n                            <hr />\n                            <div>\n                                <div className={'text-center mb-3'}>\n                                    <SelectBox \n                                        onValueChanged={this.handleChangeWashingType}\n                                        value={washingTypeValue}\n                                        dataSource={washingTypeSource}\n                                        displayExpr={'typedescription'}\n                                        valueExpr={'typevalue'}\n                                        height={'50px'}\n                                        placeholder={'Выберите тип мойки...'}\n                                    />\n                                </div>\n                                <div className={'wp_strt_bttn text-center'}>\n                                    <Button \n                                        onClick={this.handleSendWashingComand} \n                                        text={'Запустить мойку'}\n                                        height={'50px'}\n                                        width={'80%'}\n                                    />\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n            </>\n        )\n    }\n}\n\nWashingPoint = connect(globalFuncs.mapStateToProps_global)(WashingPoint);\nexport default WashingPoint;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    List\n} from 'devextreme-react';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\n\nclass OutPoints extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            outpointsByCntrls: null,\n        }\n\n        this.handleChangeEnabledOfOutPoint = this.handleChangeEnabledOfOutPoint.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const {\n            dispatch,\n            context\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/cntrls/get_points',\n            {\n                cntrlsname: globalConsts.cntrlsType.outpoints,\n                userprofilerefid: context.User.Profile.RefID,\n            },\n            (response) => {\n                if (response && response.Cntrls) {\n                    this.setState({\n                        outpointsByCntrls: response.Cntrls,\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        );\n    }\n\n    handleChangeEnabledOfOutPoint(args) {\n        const {\n            dispatch,\n            context\n        } = this.props;\n        var itemData = args.itemData;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/cntrls/upd_points',\n            {\n                cntrlsname: globalConsts.cntrlsType.outpoints,\n                point_id: itemData.id,\n                enabled: !itemData.enabled,\n                execby: context.User.FirstName + ' ' + context.User.SecondName,\n                userprofilerefid: context.User.Profile.RefID,\n            },\n            (response) => {\n                if (response && response.isSuccess) {\n                    this.setState((state) => {\n                        var {\n                            outpointsByCntrls\n                        } = state;\n                        \n                        var cntrlByKey;\n                        for(var i in outpointsByCntrls) {\n                            if (outpointsByCntrls[i].key === itemData.key) {\n                                cntrlByKey = outpointsByCntrls[i].items;\n                                break;\n                            }\n                        };\n                       \n                        for(i in cntrlByKey) {\n                            if (cntrlByKey[i].id === itemData.id) {\n                                cntrlByKey[i].enabled = !cntrlByKey[i].enabled;\n                                break;\n                            }\n                        }\n\n                        for(i in outpointsByCntrls) {\n                            if (outpointsByCntrls[i].key === itemData.key) {\n                                outpointsByCntrls[i].items = cntrlByKey;\n                            }\n                        }\n\n                        outpointsByCntrls = Object.assign([], outpointsByCntrls);\n                        return {\n                            outpointsByCntrls\n                        }\n                    });\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    render() {\n        const {\n            outpointsByCntrls\n        } = this.state;\n\n        return (\n            <>\n                <div className={'op_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Ячейки выдачи</h3>\n                    </div>\n                    <div>\n                        <List \n                            dataSource={outpointsByCntrls}\n                            height={'100%'}\n                            grouped={true}\n                            collapsibleGroups={true}\n                            focusStateEnabled={false}\n                            hoverStateEnabled={false}\n                            activeStateEnabled={false}\n                            onItemClick={this.handleChangeEnabledOfOutPoint}\n                            groupRender={(args) => {\n                                return (\n                                    <div style={{fontSize: '17px'}}>{args.key}</div>\n                                )\n                            }}\n                            itemTemplate={(args, index, component) => {\n                                var lineContainer = component.parentElement;\n                                var container = lineContainer.parentElement;\n                                if (container.className.indexOf('row') < 0) {\n                                    component.parentElement.parentElement.className += ' row';\n                                }\n                                if (lineContainer.className.indexOf('col-6') < 0) {\n                                    component.parentElement.className += ' col-6 mb-2 mt-2';\n                                }\n                                \n                                return ReactDOM.render(\n                                    (\n                                        <>\n                                            <div className={'op_cntrl_div text-center'}>\n                                                <div className={'op_cntrl_id_div'}> \n                                                    <h4 className={'op_cntrl_id'}>{args.id}</h4>\n                                                </div>\n                                                <div className={'row pt-1'}>\n                                                    <label className={'op_cntrl_status col-12 mb-0'}>\n                                                        {args.enabled ? 'Работает' : 'Не работает'}\n                                                    </label>\n                                                    <label className={'text-muted col-12'}>\n                                                         {args.enabled ? 'Выключить' : 'Включить'}\n                                                    </label>\n                                                </div>\n                                            </div>\n                                        </>\n                                    ),\n                                    component\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nOutPoints = connect(globalFuncs.mapStateToProps_global)(OutPoints);\nexport default OutPoints;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass PointSTFFHistoryLine extends React.Component {\n    render() {\n        var {\n            execBy,\n            actionTypeData, \n            date\n        } = this.props;\n\n        actionTypeData = JSON.parse(actionTypeData);\n\n        return (\n            <div className={'pb-2 pt-1'}>\n                <h5>{actionTypeData.mvmntType}</h5>\n                <div className={'row'}>\n                    <div className={'col-8 text-left'}>\n                        {execBy}\n                    </div>\n                    <div className={'col-4 row text-right'}>\n                        <div className={'col-12'}>\n                            {date.toLocaleDateString()}\n                        </div>\n                        <div className={'col-12'}>\n                            {date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nPointSTFFHistoryLine.propTypes = {\n    execBy: PropTypes.string.isRequired,\n    actionTypeData: PropTypes.string.isRequired,\n    date: PropTypes.instanceOf(Date).isRequired,\n}\n\nexport default PointSTFFHistoryLine","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel,\n    goToPage,\n} from 'js/Redux/actions';\n\n// Dx \nimport { \n    Button,\n    List,\n} from 'devextreme-react';\n\n// Local\nimport PointSTFFHistoryLine from './PointSTFFHistoryLine';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\nimport moment from 'moment';\n\nclass PointSTFF extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lastActions: null,\n        }\n\n        this.handleAddSTFFMovement = this.handleAddSTFFMovement.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadHistoryOfSTFF();\n    }\n\n    loadHistoryOfSTFF() {\n        const {\n            dispatch\n        } = this.props;\n        dispatch(changeVisibilityOfLoadingPanel(true));\n\n        globalFuncs.sendRequest(\n            'POST',\n            '/operator/action_history',\n            {\n                operationtype: globalConsts.operationTypes.load_stff,\n                datefrom: moment.utc().set({ 'hours': 0, 'minute': 0, 'second': 0 }),\n                dateto: moment.utc().set({ 'hours': 23, 'minute': 59, 'second': 59 }),\n            },\n            (response) => {\n                if (response && response.Operations) {\n                    this.setState((state) => {\n                        var { \n                            lastActions\n                        } = state;\n                        lastActions = Object.assign(\n                            [],\n                            lastActions,\n                            response.Operations,\n                        );\n                        return {\n                            lastActions\n                        }\n                    });\n                    dispatch(changeVisibilityOfLoadingPanel(false));\n                }\n            },\n            () => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    handleAddSTFFMovement() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(goToPage('LoadProducts'));\n    }\n\n    render() {\n        const {\n            lastActions,\n        } = this.state;\n\n        return (\n            <> \n                <div className={'pstf_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Данные о запасах</h3>\n                        <div className={'pstf_strt_bttn text-center'}>\n                            <Button \n                                onClick={this.handleAddSTFFMovement} \n                                text={'Добавить данные'}\n                                height={'50px'}\n                                width={'80%'}\n                            />\n                        </div>\n                    </div>\n                    <div className={'pl-2 pr-2'}>\n                        {lastActions &&\n                            <h5 className={'text-left'}>Последние действия</h5>\n                        }\n                        <List \n                            dataSource={lastActions}\n                            noDataText={'Движение полуфабрикатов в кафе не производились'}\n                            height={'100%'}\n                            focusStateEnabled={false}\n                            hoverStateEnabled={false}\n                            activeStateEnabled={false}\n                            itemRender={(e) => {\n                                return (\n                                    <PointSTFFHistoryLine \n                                        execBy={e.operatorfi}\n                                        actionTypeData={e.data}\n                                        date={new Date(e.dateofoperation)}\n                                    />\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nPointSTFF = connect(globalFuncs.mapStateToProps_global)(PointSTFF);\nexport default PointSTFF;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel,\n    goToPage,\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    SelectBox, \n    Button,\n    List\n} from 'devextreme-react';\nimport {\n    Popup\n} from 'devextreme-react/popup';\nimport { custom } from 'devextreme/ui/dialog';\nimport notify from 'devextreme/ui/notify';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\n\nclass LoadSTFF extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            actionType: 'load',\n\n            loadSTFF: {},\n            unloadSTFF: {},\n            loadContainer: {},\n\n            stffForLoad: null,\n\n            fridgeMap: [],\n            stffs: [],\n            containerInfoPopupVisible: false,\n            containerInfoPopupData: {\n                name: [],\n                data: {},\n            },\n            stffCellCode: '',\n        }\n\n        this.showConfirmationMsg = (messageHtml, title) => {\n            return custom({\n                title: title,\n                messageHtml: messageHtml,\n                buttons: [\n                    {\n                        text: 'Да',\n                        onClick: (e) => {\n                            return true;\n                        }\n                    },\n                    {\n                        text: 'Нет',\n                        onClick: (e) => {\n                            return false;\n                        }\n                    }\n                ]\n            }).show();\n        }\n        \n        this.collectionOfNamesForContainer = [\n            'A1',\n            'A2',\n            'A3',\n            'A4',\n            'A5',\n            'A6',\n            'A7',\n            'B1',\n            'B2',\n            'B3',\n            'B4',\n            'B5',\n            'B6',\n            'B7',\n            'C1',\n            'C2',\n            'C3',\n            'C4',\n            'C5',\n            'C6',\n            'C7',\n            'D1',\n            'D2',\n            'D3',\n            'D4',\n            'D5',\n            'D6',\n            'D7',\n        ];\n\n        this.handleLoadSTFF = this.handleLoadSTFF.bind(this);\n        this.handleChangeActionType = this.handleChangeActionType.bind(this);\n        this.handleMakeMvmntInThisContainer = this.handleMakeMvmntInThisContainer.bind(this);\n        this.handleHidingPopup = this.handleHidingPopup.bind(this);\n        this.handleChooseCellForLoad = this.handleChooseCellForLoad.bind(this);\n        this.handleAddStffToCell = this.handleAddStffToCell.bind(this);\n        this.handleLoadContainer = this.handleLoadContainer.bind(this);\n        this.handleChangeStffForCell = this.handleChangeStffForCell.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/stffs/get_fridge_map',\n            {\n                // point_refid\n            },\n            (response) => {\n                if (response && response.FridgeMap) {\n                    this.setState({\n                        fridgeMap: response.FridgeMap,\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/stffs/get_all_stff',\n            {\n                //point_refid\n            },\n            (response) => {\n                if (response && response.StffsByNames) {\n                    this.setState({\n                        stffs: response.StffsByNames,\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    sendHistoryOfUser() {\n        const {\n            dispatch,\n            context\n        } = this.props;\n\n        const {\n            loadSTFF,\n            unloadSTFF\n        } = this.state;\n\n        var mvmntType = '';\n        if (loadSTFF) {\n            mvmntType += 'Загрузка/Выгрузка';\n        } else if (unloadSTFF) {\n            mvmntType += 'Выгрузка'\n        }\n\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/operator/add_history',\n            {\n                userrefid: context.User.RefID,\n                actiontype: globalConsts.operationTypes.load_stff,\n                actioncontent: JSON.stringify(\n                    {\n                        mvmntType\n                    }\n                )\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    handleLoadSTFF() {\n        const {\n            context, \n            dispatch \n        } = this.props;\n\n        const {\n            loadSTFF,\n            unloadSTFF\n        } = this.state;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/stffs/update_balance',\n            {\n                operatorfi: context.User.FirstName + ' ' + context.User.SecondName,\n                loadSTFF,\n                unloadSTFF\n            },\n            (response) => {\n                if (!response || !response.isSuccess) {\n                    notify(\"Что-то в обновлении полуфабрикатов пошло не так\", \"error\", 1000);\n                } else {\n                    this.sendHistoryOfUser();\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n                dispatch(goToPage('ProductsMovements'));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n                notify(\"Что-то в обновлении полуфабрикатов пошло не так\", \"error\", 1000);\n            }\n        )\n    }\n\n    handleHidingPopup() {\n        this.setState({\n            containerInfoPopupVisible: false,\n            containerInfoPopupData: {\n                name: [],\n                data: {},\n            },\n            loadContainer: {},\n        })\n    }\n\n    handleMakeMvmntInThisContainer(args) {\n        var itemData = args.itemData;\n        var key = itemData.codename[0];\n        var {\n            unloadSTFF,\n            loadSTFF,\n            actionType\n        } = this.state;\n\n        if (actionType === 'unload') {\n            unloadSTFF[itemData.codename] = itemData.refid;\n            this.setState(() => {\n                unloadSTFF = Object.assign(\n                    {},\n                    unloadSTFF\n                );\n                return {\n                    unloadSTFF\n                }\n            })\n            return;\n        }\n\n        var showPopup = (withUnload) => {\n            this.setState(() => {\n                if (withUnload) {\n                    unloadSTFF[itemData.codename] = itemData.refid;\n                    unloadSTFF = Object.assign(\n                        {},\n                        unloadSTFF\n                    );\n                }\n\n                var conName = itemData['codename'];\n                var colOfNamesJson = {};\n                for(var i in this.collectionOfNamesForContainer){\n                    var name = this.collectionOfNamesForContainer[i];\n                    var keyLocal = name[0];\n\n                    if (!colOfNamesJson.hasOwnProperty(keyLocal)) {\n                        colOfNamesJson[keyLocal] = [];\n                    }\n                    colOfNamesJson[keyLocal].push({\n                        containerName: conName,\n                        cellName: conName + '_' + name,\n                    });\n                }\n\n                var colOfNamesArr = [];\n                for(i in colOfNamesJson) {\n                    colOfNamesArr.push({\n                        key: i,\n                        items: colOfNamesJson[i],\n                    })\n                }\n\n                return {\n                    unloadSTFF,\n                    containerInfoPopupData: {\n                        data: itemData,\n                        names: colOfNamesArr\n                    },\n                    containerInfoPopupVisible: true\n                }\n            });\n        }\n\n        if (loadSTFF.hasOwnProperty(itemData.codename)) {\n            this.showConfirmationMsg(\n                `<i>Переписать изменения в ${itemData.codename} контейнере?</i>`, \n                'Изменения в контейнере'\n            ).then((dialogResult) => {\n                if (dialogResult) {\n                    this.setState({\n                        loadContainer: loadSTFF[itemData.codename],\n                    })\n                    showPopup(false);\n                }\n            })\n        } else if (!unloadSTFF.hasOwnProperty(itemData.codename)){\n            this.showConfirmationMsg(\n                `<i>Перед загрузкой необходимо поставить контейнер на выгрзку. Выгрузить п/ф из контейнера ${itemData.codename}?</i>`, \n                'Изменения в контейнере'\n            ).then((dialogResult) => {\n                if (dialogResult) {\n                    showPopup(true);\n                }\n            })\n        } else {\n            showPopup(false);\n        }\n    }\n\n    handleChangeActionType(args) {\n        this.setState({\n            actionType: args.value,\n        })\n    }\n\n    handleChooseCellForLoad(args) {\n        this.setState((state) => {\n            const {\n                loadContainer\n            } = state;\n\n            if (loadContainer && loadContainer.hasOwnProperty(args.itemData.cellName)) {\n                    return {\n                        stffCellCode: args.itemData.cellName,\n                        stffForLoad: loadContainer[args.itemData.cellName],\n                    }\n            }\n            return {\n                stffCellCode: args.itemData.cellName,\n            }\n        });\n    }\n\n    handleChangeStffForCell(args) {\n        this.setState({\n            stffForLoad: args.value,\n        })\n    }\n\n    handleAddStffToCell() {\n        this.setState((state) => {\n            var {\n                loadContainer,\n                stffCellCode,\n                stffForLoad,\n            } = state;\n\n            if (stffForLoad) {\n                loadContainer[stffCellCode] = stffForLoad;\n                loadContainer = Object.assign(\n                    {},\n                    loadContainer\n                );\n            }\n\n            return {\n                loadContainer,\n                stffCellCode: '',\n                stffForLoad: null,\n            }\n        })\n    }\n\n    handleLoadContainer() {\n        this.setState((state) => {\n            var {\n                loadSTFF,\n                containerInfoPopupData,\n                loadContainer,\n            } = state;\n\n            var data = containerInfoPopupData.data;\n            loadSTFF[data.codename] = loadContainer;\n            loadSTFF = Object.assign(\n                {},\n                loadSTFF\n            );\n\n            return {\n                loadSTFF,\n                containerInfoPopupVisible: false,\n                containerInfoPopupData: {\n                    name: [],\n                    data: {},\n                },\n                loadContainer: {},\n            }\n        })\n    }\n\n    render() {\n        const {\n            actionType,\n\n            loadSTFF,\n            unloadSTFF,\n\n            containerInfoPopupVisible,\n            containerInfoPopupData,\n\n            fridgeMap,\n\n            stffs,\n            stffForLoad,\n\n            stffCellCode,\n            loadContainer,\n        } = this.state;\n\n        return (\n            <> \n                <div className={'pstf_div'}>\n                    <div className={'text-center mt-1 mb-2'}> \n                        <h3 className={'mb-3'}>Добавление данных</h3>\n                        <SelectBox \n                            height={'40px'}\n                            placeholder={'Выберите тип действия...'}\n                            value={actionType}\n                            dataSource={[\n                                {key: 'Выгрузка п/ф', value: 'unload'},\n                                {key: 'Загрузка п/ф', value: 'load'},\n                            ]}\n                            valueExpr={'value'}\n                            displayExpr={'key'}\n                            onValueChanged={this.handleChangeActionType}\n                        />\n                    </div>\n                </div>\n                <div className={'pstf_fridge_map'}>\n                    <List \n                        dataSource={fridgeMap}\n                        height={'100%'}\n                        grouped={true}\n                        collapsibleGroups={true}\n                        focusStateEnabled={false}\n                        hoverStateEnabled={false}\n                        activeStateEnabled={false}\n                        onItemClick={this.handleMakeMvmntInThisContainer}\n                        groupRender={(args) => {\n                            return (\n                                <div style={{fontSize: '17px'}}>{'Линия п/ф: ' + args.key}</div>\n                            )\n                        }}\n                        itemTemplate={(args, index, component) => {\n                            var lineContainer = component.parentElement;\n                            var container = lineContainer.parentElement;\n                            if (container.className.indexOf('row') < 0) {\n                                component.parentElement.parentElement.className += ' row';\n                            }\n                            if (lineContainer.className.indexOf('col-3') < 0) {\n                                component.parentElement.className += ' col-3 mb-2 mt-2';\n                            }\n                            \n                            return ReactDOM.render(\n                                (\n                                    <>\n                                        <div className={'pstf_container_div text-center'}>\n                                            <div className={'pstf_container_id_div ' + (\n                                                loadSTFF.hasOwnProperty(args.codename) \n                                                    ? 'pstf_container_id_div_green'\n                                                    : unloadSTFF.hasOwnProperty(args.codename) \n                                                        ? 'pstf_container_id_div_red'\n                                                        : 'pstf_container_id_div_gray'\n                                            )}> \n                                                <h4 className={'pstf_container_id'}>{args.codename}</h4>\n                                            </div>\n                                        </div>\n                                    </>\n                                ),\n                                component\n                            )\n                        }}\n                    />\n                </div>\n                <div className={'pstf_footer text-center mt-3'}>\n                    <Button \n                        onClick={this.handleLoadSTFF} \n                        text={'Загрузка/выгрузка'}\n                        height={'50px'}\n                        width={'80%'}\n                        disabled={(Object.keys(loadSTFF).length > 0 || Object.keys(unloadSTFF).length > 0) ? false : true}\n                    />\n                </div>\n                <Popup\n                    visible={containerInfoPopupVisible}\n                    onHiding={this.handleHidingPopup}\n                    dragEnabled={false}\n                    closeOnOutsideClick={true}\n                    showTitle={true}\n                    title=\"Ячейки контейнера\"\n                    fullScreen={true}\n                >\n                    <div className={'pstf_ppp_container_map'}>\n                        {stffCellCode && \n                            <>\n                                <div className={'mb-2'}>\n                                    <div className={'form-group text-left'}>\n                                        <label>{`Ввести полуфабрикат для ячейки ${stffCellCode}`}</label>\n                                        <div className={'mb-1'}>\n                                            <SelectBox \n                                                dataSource={stffs}\n                                                valueExpr={'refid'}\n                                                displayExpr={'stffname'}\n                                                value={stffForLoad}\n                                                searchEnabled={true}\n                                                placeholder={'Выберите ячейку п/ф...'}\n                                                onValueChanged={this.handleChangeStffForCell}\n                                            />\n                                        </div>\n                                        <div className={'pstf_footer text-center mt-2'}>\n                                            <Button \n                                                height={'50px'}\n                                                text={'Добавить полуфабрикат'}\n                                                width={'80%'}\n                                                onClick={this.handleAddStffToCell}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <hr />\n                            </>\n                        }\n                        {!stffCellCode &&\n                            <div className={'pstf_footer text-center'}>\n                                <Button \n                                    onClick={this.handleLoadContainer} \n                                    text={'Загрузить контейнер'}\n                                    height={'50px'}\n                                    width={'80%'}\n                                />\n                            </div>\n                        }\n                        <div className={'pstf_ppp_con'}>\n                            <List \n                                dataSource={containerInfoPopupData.names}\n                                height={'100%'}\n                                grouped={true}\n                                collapsibleGroups={true}\n                                focusStateEnabled={false}\n                                hoverStateEnabled={false}\n                                activeStateEnabled={false}\n                                onItemClick={this.handleChooseCellForLoad}\n                                groupRender={(args) => {\n                                    return (\n                                        <div style={{fontSize: '17px'}}>{'Линия п/ф (Контейнер): ' + args.key}</div>\n                                    )\n                                }}\n                                itemTemplate={(args, index, component) => {\n                                    var lineContainer = component.parentElement;\n                                    var container = lineContainer.parentElement;\n                                    if (container.className.indexOf('row') < 0) {\n                                        component.parentElement.parentElement.className += ' row';\n                                    }\n                                    if (lineContainer.className.indexOf('col-4') < 0) {\n                                        component.parentElement.className += ' col-4 mb-2 mt-2';\n                                    }\n                                    \n                                    return ReactDOM.render(\n                                        (\n                                            <>\n                                                <div className={'pstf_container_div text-center'}>\n                                                    <div className={'pstf_container_id_div ' + (\n                                                        loadContainer.hasOwnProperty(args.cellName) \n                                                            ? 'pstf_container_id_div_green' \n                                                            : 'pstf_container_id_div_gray'\n                                                    )}> \n                                                        <h4 className={'pstf_container_id'}>{args.cellName}</h4>\n                                                    </div>\n                                                </div>\n                                            </>\n                                        ),\n                                        component\n                                    )\n                                }}\n                            />\n                        </div>\n                    </div>\n                </Popup>\n            </>\n        )\n    }\n}\n\nLoadSTFF = connect(globalFuncs.mapStateToProps_global)(LoadSTFF);\nexport default LoadSTFF;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    goToPage\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    Button\n} from 'devextreme-react';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\n\nclass GenerateDocs extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleGoToSTFFDocs = this.handleGoToSTFFDocs.bind(this);\n        this.handleGoToSellsDocs = this.handleGoToSellsDocs.bind(this);\n        this.handleGoToWashingDocs = this.handleGoToWashingDocs.bind(this);\n    }\n\n    handleGoToSTFFDocs() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(goToPage('DocSTFF'));\n    }\n\n    handleGoToSellsDocs() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(goToPage('DocSells'));\n    }\n\n    handleGoToWashingDocs() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(goToPage('DocWashing'));\n    }\n\n    render() {\n        return (\n            <> \n                <div className={'gd_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Отчеты</h3>\n                        <div className={'gd_strt_bttn text-center mb-3'}>\n                            <Button \n                                onClick={this.handleGoToSTFFDocs} \n                                text={'Данные о запасах'}\n                                height={'50px'}\n                                width={'90%'}\n                            />\n                        </div>\n                        <div className={'gd_strt_bttn text-center mb-3'}>\n                            <Button \n                                onClick={this.handleGoToSellsDocs} \n                                text={'Данные о продажах'}\n                                height={'50px'}\n                                width={'90%'}\n                            />\n                        </div>\n                        <div className={'gd_strt_bttn text-center mb-3'}>\n                            <Button \n                                onClick={this.handleGoToWashingDocs} \n                                text={'Данные о мойке'}\n                                height={'50px'}\n                                width={'90%'}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nGenerateDocs = connect(globalFuncs.mapStateToProps_global)(GenerateDocs);\nexport default GenerateDocs;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Global\nimport globalFuncs from 'js/globalFuncs';\n\nclass DocForSTFF extends React.Component {\n    render() {\n        return (\n            <div>DocForSTFF</div>\n        )\n    }\n}\n\nDocForSTFF = connect(globalFuncs.mapStateToProps_global)(DocForSTFF);\nexport default DocForSTFF;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel,\n    goToPage,\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    TagBox,\n    SelectBox,\n    DateBox,\n    Button\n} from 'devextreme-react';\nimport notify from 'devextreme/ui/notify';\n\n// Global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\n\nclass DocForWashing extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            washingType: ['auto', 'operator'],\n            operators: [],\n            operatorForDoc: null,\n            dateState: 'LH',\n            dateFrom: globalFuncs.CalcStartDate('LH'),\n            dateTo: globalFuncs.CalcEndDate('LH')\n        }\n\n        this.tagDataSource = [\n            {key: 'Только автоматические', value: 'auto'},\n            {key: 'Только ручные', value: 'operator'},\n        ];\n\n        this.handleChangeType = this.handleChangeType.bind(this);\n        this.handleChangeOperator = this.handleChangeOperator.bind(this);\n        this.handleChangeDateState = this.handleChangeDateState.bind(this);\n        this.handleChangeDate = this.handleChangeDate.bind(this);\n        this.handleGenerateDoc = this.handleGenerateDoc.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const {\n            dispatch\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST', \n            '/users/select_by_point',\n            {},\n            (response) => {\n                if (response && response.Operators) {\n                    this.setState({\n                        operators: response.Operators,\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }, \n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    handleChangeType(args) {\n        this.setState({\n            washingType: args.value\n        });\n    }\n\n    handleChangeOperator(args) {\n        this.setState({\n            operatorForDoc: args.value,\n        })\n    }\n\n    handleChangeDateState(args) {\n        let newPeriod = args.value;\n        let dateFrom = globalFuncs.CalcStartDate(newPeriod);\n        let dateTo = globalFuncs.CalcEndDate(newPeriod);\n        \n        this.setState({\n            dateState: newPeriod,\n            dateFrom: dateFrom,\n            dateTo: dateTo,\n        })\n    }\n\n    handleChangeDate(args) {\n        this.setState({\n            dateState: 'CD',\n            dateFrom: args.element.id === 'from' ? args.value : this.state.dateFrom,\n            dateTo: args.element.id === 'to' ? args.value : this.state.dateTo\n        })\n    }\n\n    handleGenerateDoc() {\n        var {\n            operatorForDoc,\n            washingType,\n            dateFrom,\n            dateTo\n        } = this.state;\n\n        const {\n            dispatch\n        } = this.props;\n\n        if (washingType.length === 2) {\n            washingType = 'WASHING_ALL'\n        } else { \n            if (washingType.indexOf('auto') >= 0) {\n                washingType = 'WASHING_AUTO'\n            } else {\n                washingType = 'WASHING';\n            }\n        }\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/docs/generate/washing',\n            {\n                dateFrom,\n                dateTo,\n                userrefid: operatorForDoc,\n                type: washingType\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n                dispatch(goToPage('GenerateDocs'));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n                notify(\"Что-то с генерацией документа пошло не так\", \"error\", 1000);\n            }\n        )\n    }\n\n    render() {\n        const {\n            washingType,\n            operators,\n            operatorForDoc,\n            dateState,\n            dateFrom,\n            dateTo\n        } = this.state;\n\n        return (\n            <> \n                <div className={'dfw_div mb-3'} style={{fontSize: '17px'}}> \n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Отчеты о мойке</h3>\n                    </div>\n                    <div className={'form-group row mb-2'}>\n                        <label className={'col-12 col-form-label font-weight-bold'}>Типы моек для выгрузки</label>\n                        <div className={'col-12'}>\n                            <TagBox \n                                placeholder={'Выберите типы моек...'}\n                                dataSource={this.tagDataSource}\n                                onValueChanged={this.handleChangeType}\n                                showSelectionControls={true}\n                                value={washingType}\n                                displayExpr={'key'}\n                                valueExpr={'value'}\n                            />\n                        </div>\n                    </div>\n                    {washingType.indexOf('operator') >= 0 && \n                        <div className={'form-group row mb-2'}> \n                            <label className={'col-12 col-form-label font-weight-bold'}>Выбрать оператора</label>\n                            <div className={'col-12'}>\n                                <SelectBox \n                                    placeholder={'Выбрать оператора...'}\n                                    dataSource={operators}\n                                    displayExpr={'operatorfi'}\n                                    valueExpr={'refid'}\n                                    value={operatorForDoc}\n                                    onValueChanged={this.handleChangeOperator}\n                                />\n                            </div>\n                        </div>\n                    }\n                    <div className={'form-group row mb-2'}> \n                        <label className={'col-12 col-form-label font-weight-bold'}>Выбрать период</label>\n                        <div className={'col-12'}>\n                            <SelectBox \n                                placeholder={'Выбрать дату...'}\n                                dataSource={globalConsts.selectDateBox}\n                                displayExpr={'key'}\n                                valueExpr={'value'}\n                                value={dateState}\n                                onValueChanged={this.handleChangeDateState}\n                            />\n                        </div>\n                    </div>\n                    <div className={'form-group row mb-2'}> \n                        <label className={'col-12 col-form-label font-weight-bold'}>От</label>\n                        <div className={'col-12'}>\n                            <DateBox \n                                type={'datetime'}\n                                pickerType={'rollers'}\n                                value={dateFrom}\n                                id={'from'}\n                                onValueChanged={this.handleChangeDate}\n                            />\n                        </div>\n                    </div>\n                    <div className={'form-group row mb-2'}> \n                        <label className={'col-12 col-form-label font-weight-bold'}>До</label>\n                        <div className={'col-12'}>\n                            <DateBox \n                                type={'datetime'}\n                                pickerType={'rollers'}\n                                value={dateTo}\n                                id={'to'}\n                                onValueChanged={this.handleChangeDate}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className={'dfw_footer text-center'}>\n                    <Button \n                        onClick={this.handleGenerateDoc} \n                        text={'Сформировать отчет'}\n                        height={'50px'}\n                        width={'90%'}\n                    />\n                </div>\n            </>\n        )\n    }\n}\n\nDocForWashing = connect(globalFuncs.mapStateToProps_global)(DocForWashing);\nexport default DocForWashing;","import React from 'react';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Global\nimport globalFuncs from 'js/globalFuncs';\n\nclass DocForSells extends React.Component {\n    render() {\n        return (\n            <div>DocForSells</div>\n        )\n    }\n}\n\nDocForSells = connect(globalFuncs.mapStateToProps_global)(DocForSells);\nexport default DocForSells;","import React from 'react';\n\nclass MenuCategories extends React.Component {\n    render() {\n        return (\n            <div> MenuCategories </div>\n        )\n    }\n}\n\nexport default MenuCategories;","import React from 'react';\n\nclass IUCategory extends React.Component {\n    render() {\n        return (\n            <div> IUCategory </div>\n        )\n    }\n}\n\nexport default IUCategory;","import React from 'react';\n\nclass MenuDishes extends React.Component {\n    render() {\n        return (\n            <div> MenuDishes </div>\n        )\n    }\n}\n\nexport default MenuDishes;","import React from 'react';\n\nclass IUDish extends React.Component {\n    render() {\n        return (\n            <div> IUDish </div>\n        )\n    }\n}\n\nexport default IUDish;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux\nimport { connect } from 'react-redux';\nimport {\n    changeVisibilityOfLoadingPanel\n} from 'js/Redux/actions';\n\n// Dx\nimport {\n    List\n} from 'devextreme-react';\n\n// global\nimport globalFuncs from 'js/globalFuncs';\nimport globalConsts from 'js/globalConsts';\n\nclass OvenPoints extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ovenpointsbyControl: null,\n        }\n\n        this.handleChangeEnabledOvenPoint = this.handleChangeEnabledOvenPoint.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        const {\n            dispatch,\n            context\n        } = this.props;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/cntrls/get_points',\n            {\n                cntrlsname: globalConsts.cntrlsType.ovenpoints,\n                userprofilerefid: context.User.Profile.RefID,\n            },\n            (response) => {\n                if (response && response.Cntrls) {\n                    this.setState({\n                        ovenpointsbyControl: response.Cntrls,\n                    })\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        );\n    }\n\n    handleChangeEnabledOvenPoint(args) {\n        const {\n            dispatch,\n            context\n        } = this.props;\n        var itemData = args.itemData;\n\n        dispatch(changeVisibilityOfLoadingPanel(true));\n        globalFuncs.sendRequest(\n            'POST',\n            '/cntrls/upd_points',\n            {\n                cntrlsname: globalConsts.cntrlsType.ovenpoints,\n                point_id: itemData.id,\n                enabled: !itemData.enabled,\n                execby: context.User.FirstName + ' ' + context.User.SecondName,\n                userprofilerefid: context.User.Profile.RefID,\n            },\n            (response) => {\n                if (response && response.isSuccess) {\n                    this.setState((state) => {\n                        var {\n                            ovenpointsbyControl\n                        } = state;\n                        \n                        var cntrlByKey;\n                        for(var i in ovenpointsbyControl) {\n                            if (ovenpointsbyControl[i].key === itemData.key) {\n                                cntrlByKey = ovenpointsbyControl[i].items;\n                                break;\n                            }\n                        };\n                       \n                        for(i in cntrlByKey) {\n                            if (cntrlByKey[i].id === itemData.id) {\n                                cntrlByKey[i].enabled = !cntrlByKey[i].enabled;\n                                break;\n                            }\n                        }\n\n                        for(i in ovenpointsbyControl) {\n                            if (ovenpointsbyControl[i].key === itemData.key) {\n                                ovenpointsbyControl[i].items = cntrlByKey;\n                            }\n                        }\n\n                        ovenpointsbyControl = Object.assign([], ovenpointsbyControl);\n                        return {\n                            ovenpointsbyControl\n                        }\n                    });\n                }\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            },\n            (response) => {\n                dispatch(changeVisibilityOfLoadingPanel(false));\n            }\n        )\n    }\n\n    render() {\n        const {\n            ovenpointsbyControl\n        } = this.state;\n\n        return (\n            <>\n                <div className={'op_div'}>\n                    <div className={'text-center mt-1 mb-4'}> \n                        <h3 className={'mb-3'}>Ячейки печи</h3>\n                    </div>\n                    <div>\n                        <List \n                            dataSource={ovenpointsbyControl}\n                            height={'100%'}\n                            grouped={true}\n                            collapsibleGroups={true}\n                            focusStateEnabled={false}\n                            hoverStateEnabled={false}\n                            activeStateEnabled={false}\n                            onItemClick={this.handleChangeEnabledOvenPoint}\n                            groupRender={(args) => {\n                                return (\n                                    <div style={{fontSize: '17px'}}>{args.key}</div>\n                                )\n                            }}\n                            itemTemplate={(args, index, component) => {\n                                var lineContainer = component.parentElement;\n                                var container = lineContainer.parentElement;\n                                if (container.className.indexOf('row') < 0) {\n                                    component.parentElement.parentElement.className += ' row';\n                                }\n                                if (lineContainer.className.indexOf('col-4') < 0) {\n                                    component.parentElement.className += ' col-4 mb-2 mt-2';\n                                }\n                                \n                                return ReactDOM.render(\n                                    (\n                                        <>\n                                            <div className={'op_cntrl_div text-center'}>\n                                                <div className={'op_cntrl_id_div'}> \n                                                    <h4 className={'op_cntrl_id'}>{args.id}</h4>\n                                                </div>\n                                                <div className={'row pt-1'}>\n                                                    <label className={'op_cntrl_status col-12 mb-0'}>\n                                                        {args.enabled ? 'Работает' : 'Не работает'}\n                                                    </label>\n                                                    <label className={'text-muted col-12'}>\n                                                         {args.enabled ? 'Выключить' : 'Включить'}\n                                                    </label>\n                                                </div>\n                                            </div>\n                                        </>\n                                    ),\n                                    component\n                                )\n                            }}\n                        />\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nOvenPoints = connect(globalFuncs.mapStateToProps_global)(OvenPoints);\nexport default OvenPoints;\n","import React from 'react';\n\nclass Operators extends React.Component {\n    render() {\n        return (\n            <div> Operators </div>\n        )\n    }\n}\n\nexport default Operators;","import React from 'react';\n\nclass IOperator extends React.Component {\n    render() {\n        return (\n            <div> IOperator </div>\n        )\n    }\n}\n\nexport default IOperator;","import React from 'react';\n\nclass AdBlocks extends React.Component {\n    render() {\n        return (\n            <div> AdBlocks </div>\n        )\n    }\n}\n\nexport default AdBlocks;","import React from 'react';\n\nclass IUAdBlock extends React.Component {\n    render() {\n        return (\n            <div> IUAdBlock </div>\n        )\n    }\n}\n\nexport default IUAdBlock;","import { combineReducers } from 'redux';\r\n\r\n//#region Exchange data between page: IMPORT\r\n\r\nimport {\r\n    INIT_DATA_FOR_PAGE,\r\n    GET_PAGE_DATA_BY_PAGE_NAME,\r\n    CLEAR_PAGE_DATA_BY_PAGE_NAME,\r\n    CLEAR_ALL_PAGES_DATA,\r\n\r\n    GO_TO_PAGE,\r\n} from './actions';\r\n\r\n//#endregion\r\n//#region Error initialize: IMPORT\r\n\r\nimport {\r\n    ERROR\r\n} from './actions';\r\n\r\n//#endregion\r\n//#region Load panel visible: IMPORT\r\n\r\nimport {\r\n    LOAD_PANEL_VISIBLE,\r\n    LOAD_PANEL_INVISIBLE,\r\n    CLEAR_ALL_LOAD_PANELS\r\n} from './actions';\r\n\r\n//#endregion\r\n//#region Init context: IMPORT\r\n\r\nimport {\r\n    INIT_CONTEXT,\r\n    UNMOUNT_CONTEXT,\r\n} from './actions'\r\n\r\n//#endregion\r\n\r\n//#region Exchange data between page\r\n\r\nfunction dataForPage(state = {}, action) {\r\n    switch (action.type) {\r\n        case INIT_DATA_FOR_PAGE:\r\n        case GET_PAGE_DATA_BY_PAGE_NAME:\r\n            return Object.assign({}, state, action.data);\r\n        case CLEAR_ALL_PAGES_DATA:\r\n        case CLEAR_PAGE_DATA_BY_PAGE_NAME:\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction goToPage(state = {}, action) {\r\n    switch (action.type) {\r\n        case GO_TO_PAGE:\r\n            window.location.hash = '#' + action.pageName;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Error initialize\r\n\r\nfunction error(state = 'Here is error!!!', action) {\r\n    switch (action.type) {\r\n        case ERROR:\r\n            const { error } = action.error;\r\n            console.error(error.text);\r\n            return Object.assign({}, state, error);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Load panel visible\r\n\r\nfunction visibilityOfLoadingPanel(state = {isLoading: true}, action) {\r\n    switch(action.type) {\r\n        case LOAD_PANEL_INVISIBLE:\r\n        case CLEAR_ALL_LOAD_PANELS:\r\n            return {\r\n                isLoading: false,\r\n            }\r\n        case LOAD_PANEL_VISIBLE:\r\n            return {\r\n                isLoading: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Init context\r\n\r\nfunction initializedContext(state = {}, action) {\r\n    switch(action.type) {\r\n        case INIT_CONTEXT: {\r\n            delete action['type'];\r\n            return Object.assign(\r\n                state,\r\n                action,\r\n            )\r\n        }\r\n        case UNMOUNT_CONTEXT: {\r\n            return {};\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n//#endregion\r\n\r\nconst rootReducer = combineReducers({\r\n    dataForPage,\r\n    goToPage,\r\n    visibilityOfLoadingPanel,\r\n    initializedContext,\r\n    error,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from './reducers';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    HashRouter,\r\n    Route,\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\n// Actions\r\nimport {\r\n\r\n} from 'js/Redux/actions';\r\n\r\n// Dx\r\nimport { LoadPanel } from 'devextreme-react';\r\n\r\n// Local cntrls\r\nimport SlideOutMenu from './SlideOutMenu';\r\n\r\n// Pages\r\nimport HomePage from './js/Views/HomePage/HomePage'\r\nimport SignInAdmin from './js/Views/SignInAdmin/SignInAdmin';\r\n\r\nimport MainInfoPage from './js/Views/MainInfoPage/MainInfoPage';\r\nimport ChangeSystemStatus from './js/Views/ChangeSystemStatus/ChangeSystemStatus';\r\nimport PersonalCab from './js/Views/PersonalCab/PersonalCab';\r\nimport WashingPoint from './js/Views/WashingPoint/WashingPoint';\r\nimport OutPoints from './js/Views/OutPoints/OutPoints';\r\nimport PointSTFF from './js/Views/PointSTFF/PointSTFF';\r\nimport LoadSTFF from './js/Views/PointSTFF/LoadSTFF';\r\nimport GenerateDocs from './js/Views/GenerateDocs/GenerateDocs';\r\nimport DocForSTFF from './js/Views/GenerateDocs/DocForSTFF';\r\nimport DocForWashing from './js/Views/GenerateDocs/DocForWashing';\r\nimport DocForSells from './js/Views/GenerateDocs/DocForSells';\r\nimport MenuCategories from './js/Views/MenuCategories/MenuCategories';\r\nimport IUCategory from './js/Views/MenuCategories/IUCategory';\r\nimport MenuDishes from './js/Views/MenuDishes/MenuDishes';\r\nimport IUDish from './js/Views/MenuDishes/IUDish';\r\nimport OvenPoints from './js/Views/OvenPoints/OvenPoints';\r\nimport Operators from './js/Views/Operators/Operators';\r\nimport IOperator from './js/Views/Operators/IOperator';\r\nimport AdBlocks from './js/Views/AdBlocks/AdBlocks';\r\nimport IUAdBlock from './js/Views/AdBlocks/IUAdBlock';\r\n\r\n// Redux store, actions, helpers.\r\nimport { connect, Provider } from 'react-redux';\r\nimport configureStore from 'js/Redux/configureStore';\r\nimport {\r\n    initContext,\r\n    unmountContext,\r\n    changeVisibilityOfLoadingPanel,\r\n} from 'js/Redux/actions';\r\n\r\n// global\r\nimport globalFuncs from 'js/globalFuncs';\r\nimport globalConsts from 'js/globalConsts';\r\n\r\nconst store = configureStore();\r\nclass Main extends Component {\r\n    componentDidMount() {\r\n        const {\r\n            dispatch\r\n        } = this.props;\r\n\r\n        var locationHash = window.location.hash.replace('#', '')\r\n        locationHash = locationHash.charAt(0).toLowerCase() + locationHash.substring(1);\r\n\r\n        dispatch(changeVisibilityOfLoadingPanel(true));\r\n        globalFuncs.sendRequest(\r\n            'GET',\r\n            `/verifyToken?token=${globalFuncs.getToken()}&pageName=${locationHash}`,\r\n            null,\r\n            (response) => {\r\n                dispatch(initContext(response));\r\n                dispatch(changeVisibilityOfLoadingPanel(false));\r\n            },\r\n            (response) => {\r\n                dispatch(unmountContext());\r\n                dispatch(changeVisibilityOfLoadingPanel(false));\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const pages = [\r\n            {page: globalConsts.pages.main, component: MainInfoPage, visible: true, },\r\n            {page: globalConsts.pages.productsMovements, component: PointSTFF, visible: true, },\r\n            {page: globalConsts.pages.loadProducts, component: LoadSTFF, visible: false, },\r\n            {page: globalConsts.pages.washPoint, component: WashingPoint, visible: true, },\r\n            {page: globalConsts.pages.changeSystemStatus, component: ChangeSystemStatus, visible: true, },\r\n            {page: globalConsts.pages.outPoints, component: OutPoints, visible: true, },\r\n            {page: globalConsts.pages.generateDocs, component: GenerateDocs, visible: true, },\r\n            {page: globalConsts.pages.docSTFF, component: DocForSTFF, visible: false, },\r\n            {page: globalConsts.pages.docSells, component: DocForSells, visible: false, },\r\n            {page: globalConsts.pages.docWashing, component: DocForWashing, visible: false, },\r\n            {page: globalConsts.pages.menuCategories, component: MenuCategories, visible: true, },\r\n            {page: globalConsts.pages.iUCategory, component: IUCategory, visible: false, },\r\n            {page: globalConsts.pages.menuDishes, component: MenuDishes, visible: true, },\r\n            {page: globalConsts.pages.iUDish, component: IUDish, visible: false, },\r\n            {page: globalConsts.pages.ovenPoints, component: OvenPoints, visible: true, },\r\n            {page: globalConsts.pages.operators, component: Operators, visible: true, },\r\n            {page: globalConsts.pages.iOperator, component: IOperator, visible: false, },\r\n            {page: globalConsts.pages.adBlocks, component: AdBlocks, visible: true, },\r\n            {page: globalConsts.pages.iUAdBlocks, component: IUAdBlock, visible: false, },\r\n            {page: globalConsts.pages.user, component: PersonalCab, visible: true, },\r\n\r\n            {button: globalConsts.buttons.logout, action: () => {\r\n                const { \r\n                    dispatch\r\n                } = this.props;\r\n                dispatch(unmountContext());\r\n                window.location.reload();\r\n            }, visible: true, },\r\n        ];\r\n\r\n        //Redux\r\n        const {\r\n            isLoading,\r\n            context\r\n        } = this.props;\r\n\r\n        const token = globalFuncs.getToken();\r\n        console.log(context);\r\n\r\n        return (\r\n            <>\r\n                <LoadPanel \r\n                    showIndicator={true}\r\n                    message={'Loading...'}\r\n                    visible={isLoading}\r\n                />\r\n\r\n                {!token && !context.User &&\r\n                    <HashRouter hashType={'noslash'}>\r\n                        <Redirect from='/' to='/Home' exact />\r\n                        <Route path={'/Home'} component={HomePage} />\r\n                        <Route path={'/SignIn'} component={SignInAdmin} />\r\n                    </HashRouter>\r\n                }\r\n                {token && context.User && \r\n                    <SlideOutMenu \r\n                        menuItems={pages}\r\n                        availablePages={context.Pages}\r\n                        defaultPage={'Main'}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nMain.propTypes = {\r\n    isLoading: PropTypes.bool.isRequired,\r\n    context: PropTypes.object.isRequired,\r\n}\r\n\r\nconst MainComponent = connect(globalFuncs.mapStateToProps_global)(Main);\r\nclass Root extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <MainComponent />\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Root;\r\n","import 'react-app-polyfill/ie11';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Root from \"./Main\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport 'css/index.scss';\r\nimport 'admin/css/admin.index.scss';\r\n\r\nReactDOM.render(\r\n    <Root />,\r\n    document.getElementById(\"root_reactapp\")\r\n);\r\n"],"sourceRoot":""}